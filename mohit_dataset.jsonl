{"query":"This code sorts a list of numbers using the built-in Python sort method.","code":"numbers = [3, 1, 4, 1, 5, 9, 2, 6]\nnumbers.sort()\nprint(numbers)"}
{"query":"This code reverses a string using slicing.","code":"string = \"hello\"\nreversed_string = string[::-1]\nprint(reversed_string)"}
{"query":"This code implements a basic stack using a list.","code":"stack = []\nstack.append(1)\nstack.append(2)\nprint(stack.pop())"}
{"query":"This code checks if a string is a palindrome.","code":"string = \"madam\"\nif string == string[::-1]:\n    print(True)\nelse:\n    print(False)"}
{"query":"This code searches for an element in a list using a linear search.","code":"numbers = [1, 2, 3, 4, 5]\ntarget = 3\nfor i in range(len(numbers)):\n    if numbers[i] == target:\n        print(i)\n        break"}
{"query":"This code demonstrates the usage of a queue using the collections.deque module.","code":"from collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nprint(queue.popleft())"}
{"query":"This code calculates the factorial of a number using recursion.","code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))"}
{"query":"This code finds the maximum value in a list.","code":"numbers = [1, 5, 2, 8, 3]\nmaximum = max(numbers)\nprint(maximum)"}
{"query":"This code implements a binary search algorithm on a sorted list.","code":"numbers = [2, 5, 7, 8, 11, 12]\ntarget = 13\nleft, right = 0, len(numbers) - 1\nwhile left <= right:\n    mid = (left + right) // 2\n    if numbers[mid] == target:\n        print(mid)\n        break\n    elif numbers[mid] < target:\n        left = mid + 1\n    else:\n        right = mid - 1"}
{"query":"This code removes duplicates from a list while preserving the order.","code":"numbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = []\nfor num in numbers:\n    if num not in unique_numbers:\n        unique_numbers.append(num)\nprint(unique_numbers)"}
{"query":"This code calculates the Fibonacci sequence up to a certain number of terms using iteration.","code":"n = 10\na, b = 0, 1\nfor _ in range(n):\n    print(a)\n    a, b = b, a + b"}
{"query":"This code demonstrates how to use a dictionary to store key-value pairs.","code":"my_dict = {\"apple\": 1, \"banana\": 2, \"cherry\": 3}\nprint(my_dict[\"banana\"])"}
{"query":"This code implements a simple linked list node.","code":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None"}
{"query":"This code checks if a list is empty.","code":"my_list = []\nif not my_list:\n    print(\"List is empty\")"}
{"query":"This code calculates the sum of all elements in a list.","code":"numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = sum(numbers)\nprint(sum_of_numbers)"}
{"query":"This code creates a set from a list, removing duplicate values.","code":"numbers = [1, 2, 2, 3, 4, 4, 5]\nmy_set = set(numbers)\nprint(my_set)"}
{"query":"Implement a stack data structure using a Python list.","code":"stack = []\nstack.append(10)\nstack.append(20)\nitem = stack.pop()"}
{"query":"Implement a queue data structure using a Python list.","code":"queue = []\nqueue.append(1)\nitem = queue.pop(0)"}
{"query":"Calculate the factorial of a number using recursion.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"Implement a function to search for an element in a list using linear search.","code":"def linear_search(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1"}
{"query":"Implement binary search to find an element in a sorted list.","code":"def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high:\n    mid = (low + high) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target:\n      low = mid + 1\n    else:\n      high = mid - 1\n  return -1"}
{"query":"Sort a list of numbers using the bubble sort algorithm.","code":"def bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"query":"Sort a list using the insertion sort algorithm.","code":"def insertion_sort(arr):\n  for i in range(1, len(arr)):\n    key = arr[i]\n    j = i-1\n    while j >=0 and key < arr[j]:\n      arr[j+1] = arr[j]\n      j -= 1\n    arr[j+1] = key"}
{"query":"Implement a simple linked list with node creation and traversal.","code":"class Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nhead = Node(10)\nhead.next = Node(20)"}
{"query":"Calculate the sum of elements in a list recursively.","code":"def recursive_sum(arr):\n  if not arr:\n    return 0\n  else:\n    return arr[0] + recursive_sum(arr[1:])"}
{"query":"Check if a string is a palindrome.","code":"def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]"}
{"query":"Implement a function to reverse a string.","code":"def reverse_string(s):\n  return s[::-1]"}
{"query":"Find the maximum value in a list.","code":"def find_max(arr):\n  if not arr:\n    return None\n  max_val = arr[0]\n  for num in arr:\n    if num > max_val:\n      max_val = num\n  return max_val"}
{"query":"Implement a function to calculate the Fibonacci sequence up to n terms.","code":"def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    list_fib = [0, 1]\n    while len(list_fib) < n:\n      next_fib = list_fib[-1] + list_fib[-2]\n      list_fib.append(next_fib)\n    return list_fib"}
{"query":"Implement a function to remove duplicates from a list.","code":"def remove_duplicates(arr):\n  return list(set(arr))"}
{"query":"Implement a function to check if a list contains any duplicates.","code":"def has_duplicates(arr):\n  return len(arr) != len(set(arr))"}
{"query":"Implement a function to rotate a list to the right by k steps.","code":"def rotate_list(arr, k):\n  k = k % len(arr)\n  return arr[-k:] + arr[:-k]"}
{"query":"This code implements a basic stack using a Python list.","code":"stack = []\nstack.append(10)\nstack.append(20)\nelement = stack.pop()"}
{"query":"This Python code reverses a list using slicing.","code":"my_list = [1, 2, 3, 4, 5]\nreversed_list = my_list[::-1]"}
{"query":"This code demonstrates how to search for an element in a list.","code":"my_list = [5, 2, 9, 1, 5, 6]\nif 9 in my_list:\n    index = my_list.index(9)"}
{"query":"This code sorts a list of numbers in ascending order.","code":"numbers = [3, 1, 4, 1, 5, 9, 2, 6]\nnumbers.sort()"}
{"query":"This program implements a simple queue using a Python list.","code":"queue = []\nqueue.append('A')\nqueue.append('B')\nfirst_element = queue.pop(0)"}
{"query":"This code snippet finds the factorial of a number using recursion.","code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"query":"This code calculates the Fibonacci sequence up to a given number of terms.","code":"def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b"}
{"query":"This code implements a basic binary search algorithm.","code":"def binary_search(list, target):\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == target:\n            return mid\n        elif list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1"}
{"query":"This code counts the occurrences of each element in a list using a dictionary.","code":"def count_elements(lst):\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n    return counts"}
{"query":"This code snippet checks if a string is a palindrome.","code":"def is_palindrome(s):\n    processed_string = ''.join(filter(str.isalnum, s)).lower()\n    return processed_string == processed_string[::-1]"}
{"query":"This code finds the maximum value in a list.","code":"def find_max(numbers):\n    if not numbers:\n        return None\n    maximum = numbers[0]\n    for number in numbers:\n        if number > maximum:\n            maximum = number\n    return maximum"}
{"query":"This code demonstrates bubble sort algorithm to sort a list.","code":"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"query":"This code merges two sorted lists into a single sorted list.","code":"def merge_sorted_lists(list1, list2):\n    merged_list = sorted(list1 + list2)\n    return merged_list"}
{"query":"This code snippet removes duplicates from a list while preserving the order.","code":"def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}
{"query":"This code implements a Depth-First Search (DFS) traversal of a graph represented as an adjacency list.","code":"def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n    return visited"}
{"query":"This code implements Breadth-First Search (BFS) traversal of a graph represented as an adjacency list.","code":"from collections import deque\ndef bfs(graph, start):\n    visited, queue = set(), deque([start])\n    visited.add(start)\n    while queue:\n        vertex = queue.popleft()\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n    return visited"}
{"query":"This code finds the maximum value in a list using iteration.","code":"def find_max(nums):\n  max_val = nums[0]\n  for num in nums:\n    if num > max_val:\n      max_val = num\n  return max_val"}
{"query":"This code reverses a string using slicing.","code":"def reverse_string(s):\n  return s[::-1]"}
{"query":"This code checks if a number is prime.","code":"def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"}
{"query":"This code implements a simple linear search.","code":"def linear_search(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1"}
{"query":"This code calculates the factorial of a number using recursion.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"This code sorts a list using the built-in sorted function.","code":"def sort_list(nums):\n  return sorted(nums)"}
{"query":"This code implements a basic binary search algorithm.","code":"def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high:\n    mid = (low + high) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target:\n      low = mid + 1\n    else:\n      high = mid - 1\n  return -1"}
{"query":"This code checks if a string is a palindrome.","code":"def is_palindrome(s):\n  processed_string = ''.join(filter(str.isalnum, s)).lower()\n  return processed_string == processed_string[::-1]"}
{"query":"This code removes duplicates from a list while preserving order.","code":"def remove_duplicates(nums):\n  seen = set()\n  result = []\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      result.append(num)\n  return result"}
{"query":"This code calculates the sum of all elements in a list.","code":"def sum_list(nums):\n  total = 0\n  for num in nums:\n    total += num\n  return total"}
{"query":"This code finds the intersection of two sets.","code":"def set_intersection(set1, set2):\n  return set1.intersection(set2)"}
{"query":"This code checks if a given key exists in a dictionary.","code":"def key_exists(dictionary, key):\n  return key in dictionary"}
{"query":"This code merges two sorted lists into a single sorted list.","code":"def merge_sorted_lists(list1, list2):\n  return sorted(list1 + list2)"}
{"query":"This code calculates the Fibonacci sequence up to n terms using iteration.","code":"def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    list_fib = [0, 1]\n    while len(list_fib) < n:\n      next_fib = list_fib[-1] + list_fib[-2]\n      list_fib.append(next_fib)\n    return list_fib"}
{"query":"This code implements a stack using a list.","code":"class Stack:\n  def __init__(self):\n    self.items = []\n  def push(self, item):\n    self.items.append(item)\n  def pop(self):\n    return self.items.pop()\n  def is_empty(self):\n    return self.items == []\n  def peek(self):\n    return self.items[-1]"}
{"query":"This code implements a queue using a list.","code":"class Queue:\n    def __init__(self):\n        self.items = []\n    def enqueue(self, item):\n        self.items.insert(0, item)\n    def dequeue(self):\n        return self.items.pop()\n    def is_empty(self):\n        return self.items == []\n    def size(self):\n        return len(self.items)"}
{"query":"Implement a function to reverse a linked list.","code":"def reverse_list(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev"}
{"query":"Write a function to check if a string is a palindrome.","code":"def is_palindrome(s):\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]"}
{"query":"Implement a binary search algorithm.","code":"def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"}
{"query":"Create a function to find the factorial of a number.","code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"query":"Implement a function to find the maximum element in an array.","code":"def find_max(arr):\n    if not arr:\n        return None\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"query":"Write a function to check if a number is prime.","code":"def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"query":"Implement a function to merge two sorted arrays.","code":"def merge_sorted_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n    return merged"}
{"query":"Write a function to calculate the Fibonacci sequence up to n terms.","code":"def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        list_fib = [0, 1]\n        while len(list_fib) < n:\n            next_fib = list_fib[-1] + list_fib[-2]\n            list_fib.append(next_fib)\n        return list_fib"}
{"query":"Implement a queue using two stacks.","code":"class Queue:\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n    def enqueue(self, item):\n        self.stack1.append(item)\n    def dequeue(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        if self.stack2:\n            return self.stack2.pop()\n        return None"}
{"query":"Create a function to check if a given string has balanced parentheses.","code":"def is_balanced(s):\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"query":"Implement a function to remove duplicates from a list while preserving order.","code":"def remove_duplicates(arr):\n    seen = set()\n    result = []\n    for item in arr:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}
{"query":"Write a function to find the common elements between two lists.","code":"def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"query":"Implement a function to find the kth smallest element in an array.","code":"def kth_smallest(arr, k):\n    arr.sort()\n    return arr[k-1]"}
{"query":"Write a function to calculate the depth of a binary tree.","code":"def tree_depth(root):\n    if root is None:\n        return 0\n    return 1 + max(tree_depth(root.left), tree_depth(root.right))"}
{"query":"Implement a function to perform a breadth-first search on a graph.","code":"def bfs(graph, start):\n    visited, queue = set(), [start]\n    visited.add(start)\n    while queue:\n        vertex = queue.pop(0)\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n    return visited"}
{"query":"Create a function to sort a list using the bubble sort algorithm.","code":"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"}
{"query":"Implement a stack data structure with push and pop operations.","code":"stack = []\ndef push(val):\n    stack.append(val)\ndef pop():\n    if not stack:\n        return None\n    return stack.pop()"}
{"query":"Implement a queue data structure with enqueue and dequeue operations.","code":"queue = []\ndef enqueue(val):\n    queue.append(val)\ndef dequeue():\n    if not queue:\n        return None\n    return queue.pop(0)"}
{"query":"Write a function to reverse a linked list.","code":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\ndef reverse_linked_list(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev"}
{"query":"Implement a binary search algorithm to find an element in a sorted array.","code":"def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"query":"Implement a function to check if a string is a palindrome.","code":"def is_palindrome(s):\n    processed_string = ''.join(char.lower() for char in s if char.isalnum())\n    return processed_string == processed_string[::-1]"}
{"query":"Write a function to calculate the factorial of a number using recursion.","code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"query":"Implement a function to find the maximum value in a binary tree.","code":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef find_max(root):\n    if root is None:\n        return float('-inf')\n    return max(root.data, find_max(root.left), find_max(root.right))"}
{"query":"Implement a breadth-first search (BFS) algorithm for a graph.","code":"from collections import deque\ndef bfs(graph, start_node):\n    visited = set()\n    queue = deque([start_node])\n    visited.add(start_node)\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)"}
{"query":"Implement a depth-first search (DFS) algorithm for a graph.","code":"def dfs(graph, start_node, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start_node)\n    for neighbor in graph[start_node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n    return visited"}
{"query":"Implement the merge sort algorithm.","code":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    merged = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return merged"}
{"query":"Implement the quicksort algorithm.","code":"def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n    return quicksort(less) + [pivot] + quicksort(greater)"}
{"query":"Implement a function to detect a cycle in a directed graph.","code":"def has_cycle(graph):\n    visited = set()\n    recursion_stack = set()\n    def dfs(node):\n        visited.add(node)\n        recursion_stack.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor):\n                    return True\n            elif neighbor in recursion_stack:\n                return True\n        recursion_stack.remove(node)\n        return False\n    for node in graph:\n        if node not in visited:\n            if dfs(node):\n                return True\n    return False"}
{"query":"Implement a hash table with separate chaining for collision resolution.","code":"class HashTable:\n    def __init__(self, size=10):\n        self.size = size\n        self.table = [[] for _ in range(size)]\n    def hash(self, key):\n        return hash(key) % self.size\n    def insert(self, key, value):\n        index = self.hash(key)\n        self.table[index].append((key, value))\n    def get(self, key):\n        index = self.hash(key)\n        for k, v in self.table[index]:\n            if k == key:\n                return v\n        return None"}
{"query":"Implement Dijkstra's algorithm to find the shortest path in a graph.","code":"import heapq\ndef dijkstra(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    while pq:\n        dist, node = heapq.heappop(pq)\n        if dist > distances[node]:\n            continue\n        for neighbor, weight in graph[node].items():\n            if distances[node] + weight < distances[neighbor]:\n                distances[neighbor] = distances[node] + weight\n                heapq.heappush(pq, (distances[neighbor], neighbor))\n    return distances"}
{"query":"Implement a function to find the lowest common ancestor (LCA) of two nodes in a binary tree.","code":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef lowest_common_ancestor(root, p, q):\n    if not root:\n        return None\n    if root.data == p.data or root.data == q.data:\n        return root\n    left = lowest_common_ancestor(root.left, p, q)\n    right = lowest_common_ancestor(root.right, p, q)\n    if left and right:\n        return root\n    return left if left else right"}
{"query":"Implement a function to check if a tree is balanced.","code":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef is_balanced(root):\n    def get_height(node):\n        if not node:\n            return 0\n        left_height = get_height(node.left)\n        right_height = get_height(node.right)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return 1 + max(left_height, right_height)\n    return get_height(root) != -1"}
{"query":"Write a function that checks if a number is positive.","code":"def is_positive(number):\n  if number > 0:\n    return True\n  else:\n    return False"}
{"query":"Define a function to calculate the factorial of a number.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"Create a function that returns the maximum of two numbers.","code":"def find_max(a, b):\n  return max(a, b)"}
{"query":"Implement a function to determine if a year is a leap year.","code":"def is_leap_year(year):\n  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    return True\n  else:\n    return False"}
{"query":"Write a function to reverse a given string.","code":"def reverse_string(s):\n  return s[::-1]"}
{"query":"Make a function that checks if a number is even.","code":"def is_even(number):\n  return number % 2 == 0"}
{"query":"Define a function that calculates the sum of a list of numbers.","code":"def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total"}
{"query":"Create a function to find the minimum of three numbers.","code":"def find_min(a, b, c):\n  return min(a, b, c)"}
{"query":"Implement a function to filter out negative numbers from a list.","code":"def filter_positive(numbers):\n  return [num for num in numbers if num >= 0]"}
{"query":"Write a function that checks if a string is a palindrome.","code":"def is_palindrome(s):\n  processed_string = ''.join(char.lower() for char in s if char.isalnum())\n  return processed_string == processed_string[::-1]"}
{"query":"Define a function to calculate the average of a list of numbers.","code":"def calculate_average(numbers):\n  if not numbers:\n    return 0\n  return sum(numbers) / len(numbers)"}
{"query":"Create a function that converts Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius):\n  return (celsius * 9/5) + 32"}
{"query":"Implement a function to determine the grade based on a score.","code":"def get_grade(score):\n  if score >= 90:\n    return 'A'\n  elif score >= 80:\n    return 'B'\n  elif score >= 70:\n    return 'C'\n  elif score >= 60:\n    return 'D'\n  else:\n    return 'F'"}
{"query":"Write a function that counts the occurrences of a specific character in a string.","code":"def count_char(text, char):\n  count = 0\n  for c in text:\n    if c == char:\n      count += 1\n  return count"}
{"query":"Define a function to find the largest element in a list.","code":"def find_largest(numbers):\n  if not numbers:\n    return None\n  return max(numbers)"}
{"query":"Create a function that checks if a given number is prime.","code":"def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"}
{"query":"This function checks if a number is positive.","code":"def is_positive(number):\n  if number > 0:\n    return True\n  else:\n    return False"}
{"query":"This function calculates the factorial of a non-negative integer using recursion.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"This function returns the maximum of two numbers.","code":"def find_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b"}
{"query":"This function checks if a string is a palindrome.","code":"def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]"}
{"query":"This function determines the grade based on a score using if-elif-else.","code":"def get_grade(score):\n  if score >= 90:\n    return 'A'\n  elif score >= 80:\n    return 'B'\n  elif score >= 70:\n    return 'C'\n  elif score >= 60:\n    return 'D'\n  else:\n    return 'F'"}
{"query":"This function iterates through a list and prints each element.","code":"def print_list_elements(my_list):\n  for item in my_list:\n    print(item)"}
{"query":"This function sums numbers from 1 up to a given number using a loop.","code":"def sum_up_to(n):\n  total = 0\n  for i in range(1, n + 1):\n    total += i\n  return total"}
{"query":"This function checks if a number is even.","code":"def is_even(number):\n  return number % 2 == 0"}
{"query":"This function converts Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius):\n  return (celsius * 9/5) + 32"}
{"query":"This function converts Fahrenheit to Celsius.","code":"def fahrenheit_to_celsius(fahrenheit):\n  return (fahrenheit - 32) * 5/9"}
{"query":"This function returns the absolute value of a number.","code":"def absolute_value(number):\n  if number < 0:\n    return -number\n  else:\n    return number"}
{"query":"This function uses a while loop to print numbers from 1 to 5.","code":"def print_numbers_while():\n  i = 1\n  while i <= 5:\n    print(i)\n    i += 1"}
{"query":"This function calculates the area of a circle.","code":"def circle_area(radius):\n  return 3.14159 * radius**2"}
{"query":"This function determines if a year is a leap year.","code":"def is_leap_year(year):\n  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    return True\n  else:\n    return False"}
{"query":"This function checks if a string contains a specific substring.","code":"def contains_substring(main_string, substring):\n  return substring in main_string"}
{"query":"This function counts the number of vowels in a string.","code":"def count_vowels(s):\n  vowels = 'aeiouAEIOU'\n  count = 0\n  for char in s:\n    if char in vowels:\n      count += 1\n  return count"}
{"query":"Define a function that returns the square of a number.","code":"def square(x):\n return x * x"}
{"query":"Write a function to check if a number is even or odd.","code":"def even_odd(number):\n if number % 2 == 0:\n return \"Even\"\n else:\n return \"Odd\""}
{"query":"Create a function that adds two numbers together.","code":"def add(a, b):\n return a + b"}
{"query":"Implement a function to calculate the factorial of a number using recursion.","code":"def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)"}
{"query":"Write a function that returns the larger of two numbers.","code":"def max_of_two(a, b):\n if a > b:\n return a\n else:\n return b"}
{"query":"Define a function to calculate the sum of a list of numbers.","code":"def sum_list(numbers):\n total = 0\n for number in numbers:\n total += number\n return total"}
{"query":"Create a function that checks if a string is a palindrome.","code":"def is_palindrome(s):\n return s == s[::-1]"}
{"query":"Write a function to reverse a string.","code":"def reverse_string(s):\n return s[::-1]"}
{"query":"Implement a function that finds the maximum value in a list.","code":"def find_max(numbers):\n if not numbers:\n return None\n max_value = numbers[0]\n for number in numbers:\n if number > max_value:\n max_value = number\n return max_value"}
{"query":"Create a function to determine if a number is prime.","code":"def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True"}
{"query":"Define a function that returns the absolute value of a number.","code":"def absolute_value(n):\n if n < 0:\n return -n\n else:\n return n"}
{"query":"Write a function to convert Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius):\n return (celsius * 9/5) + 32"}
{"query":"Implement a function that filters even numbers from a list.","code":"def filter_even(numbers):\n return [number for number in numbers if number % 2 == 0]"}
{"query":"Create a function that calculates the average of a list of numbers.","code":"def calculate_average(numbers):\n if not numbers:\n return 0\n return sum(numbers) / len(numbers)"}
{"query":"Write a function to check if a string contains a specific substring.","code":"def contains_substring(text, substring):\n return substring in text"}
{"query":"Implement a function that simulates a simple calculator with add, subtract, multiply, and divide operations.","code":"def calculator(num1, num2, operation):\n if operation == 'add':\n return num1 + num2\n elif operation == 'subtract':\n return num1 - num2\n elif operation == 'multiply':\n return num1 * num2\n elif operation == 'divide':\n if num2 == 0:\n return 'Cannot divide by zero'\n return num1 / num2\n else:\n return 'Invalid operation'"}
{"query":"Check if a number is positive using an if-else statement.","code":"def is_positive(number):\n if number > 0:\n return True\n else:\n return False"}
{"query":"Calculate the factorial of a number using a recursive function.","code":"def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)"}
{"query":"Implement a function that returns the larger of two numbers.","code":"def max_of_two(a, b):\n if a > b:\n return a\n else:\n return b"}
{"query":"Write a function to determine if a given year is a leap year.","code":"def is_leap_year(year):\n if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n return True\n else:\n return False"}
{"query":"Iterate through a list and print each element using a for loop.","code":"def print_list_elements(my_list):\n for item in my_list:\n print(item)"}
{"query":"Use a while loop to count down from a given number to 1.","code":"def countdown(n):\n while n > 0:\n print(n)\n n -= 1"}
{"query":"Define a function that sums all elements in a list.","code":"def sum_list(numbers):\n total = 0\n for number in numbers:\n total += number\n return total"}
{"query":"Create a function that checks if a string is a palindrome.","code":"def is_palindrome(text):\n processed_text = ''.join(filter(str.isalnum, text)).lower()\n return processed_text == processed_text[::-1]"}
{"query":"Write a function to reverse a string.","code":"def reverse_string(s):\n return s[::-1]"}
{"query":"Implement a function that finds the maximum value in a list.","code":"def find_max(numbers):\n if not numbers:\n return None\n maximum = numbers[0]\n for number in numbers:\n if number > maximum:\n maximum = number\n return maximum"}
{"query":"Create a function to calculate the average of numbers in a list.","code":"def calculate_average(numbers):\n if not numbers:\n return 0\n return sum(numbers) / len(numbers)"}
{"query":"Write a function to check if a number is even or odd.","code":"def even_or_odd(number):\n if number % 2 == 0:\n return \"Even\"\n else:\n return \"Odd\""}
{"query":"Define a function with default argument values.","code":"def greet(name, greeting=\"Hello\"):\n return f\"{greeting}, {name}!\""}
{"query":"Use nested loops to create a multiplication table.","code":"def multiplication_table(n):\n for i in range(1, n + 1):\n for j in range(1, n + 1):\n print(i * j, end=\" \")\n print()"}
{"query":"Create a function that uses try-except blocks to handle potential errors.","code":"def safe_division(a, b):\n try:\n return a / b\n except ZeroDivisionError:\n return \"Cannot divide by zero\""}
{"query":"Write a function that uses the 'pass' statement as a placeholder.","code":"def my_function():\n pass"}
{"query":"Write a function that checks if a number is positive.","code":"def is_positive(number):\n  if number > 0:\n    return True\n  else:\n    return False"}
{"query":"Create a function to calculate the factorial of a number using recursion.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"Write a function that returns the larger of two numbers.","code":"def max_of_two(a, b):\n  if a > b:\n    return a\n  else:\n    return b"}
{"query":"Define a function to check if a string is a palindrome.","code":"def is_palindrome(s):\n  return s == s[::-1]"}
{"query":"Create a function to determine the sum of numbers in a list.","code":"def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total"}
{"query":"Write a function that returns the absolute value of a number.","code":"def absolute_value(number):\n  if number < 0:\n    return -number\n  else:\n    return number"}
{"query":"Implement a function that converts Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius):\n  return (celsius * 9/5) + 32"}
{"query":"Write a function to find the maximum value in a list.","code":"def find_max(numbers):\n  maximum = numbers[0]\n  for number in numbers:\n    if number > maximum:\n      maximum = number\n  return maximum"}
{"query":"Create a function that checks if a year is a leap year.","code":"def is_leap_year(year):\n  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    return True\n  else:\n    return False"}
{"query":"Define a function to reverse a string.","code":"def reverse_string(s):\n  return s[::-1]"}
{"query":"Implement a function to calculate the average of numbers in a list.","code":"def calculate_average(numbers):\n  if not numbers:\n    return 0\n  return sum(numbers) / len(numbers)"}
{"query":"Write a function that finds the minimum value in a list.","code":"def find_min(numbers):\n  minimum = numbers[0]\n  for number in numbers:\n    if number < minimum:\n      minimum = number\n  return minimum"}
{"query":"Create a function to filter even numbers from a list.","code":"def filter_even_numbers(numbers):\n  even_numbers = []\n  for number in numbers:\n    if number % 2 == 0:\n      even_numbers.append(number)\n  return even_numbers"}
{"query":"Write a function that simulates a simple calculator with add, subtract, multiply and divide operations.","code":"def calculator(num1, num2, operation):\n  if operation == 'add':\n    return num1 + num2\n  elif operation == 'subtract':\n    return num1 - num2\n  elif operation == 'multiply':\n    return num1 * num2\n  elif operation == 'divide':\n    return num1 / num2 if num2 != 0 else \"Cannot divide by zero\"\n  else:\n    return \"Invalid operation\""}
{"query":"Implement a function to check if a number is prime.","code":"def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"}
{"query":"Create a function that converts Fahrenheit to Celsius.","code":"def fahrenheit_to_celsius(fahrenheit):\n  return (fahrenheit - 32) * 5/9"}
{"query":"This code defines a function that returns the square of a given number.","code":"def square(x):\n  return x * x"}
{"query":"Write a function that checks if a number is even.","code":"def is_even(n):\n  return n % 2 == 0"}
{"query":"Create a function that calculates the factorial of a number using recursion.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"This function uses a loop to calculate the sum of numbers in a list.","code":"def sum_list(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total"}
{"query":"The code defines a function to find the maximum of two numbers using conditional statements.","code":"def find_max(a, b):\n  if a > b:\n    return a\n  else:\n    return b"}
{"query":"Write a function that checks if a string is a palindrome.","code":"def is_palindrome(s):\n  return s == s[::-1]"}
{"query":"This code demonstrates using a for loop to print numbers from 1 to 5.","code":"for i in range(1, 6):\n  print(i)"}
{"query":"This example uses a while loop to decrement a counter until it reaches zero.","code":"i = 5\nwhile i > 0:\n  i -= 1"}
{"query":"Write a function that uses a try-except block to handle potential errors when dividing by zero.","code":"def safe_division(a, b):\n  try:\n    return a / b\n  except ZeroDivisionError:\n    return 'Cannot divide by zero'"}
{"query":"This code uses nested if-else statements to categorize a number based on its value.","code":"def categorize_number(n):\n  if n > 0:\n    if n < 10:\n      return 'single digit positive'\n    else:\n      return 'multi digit positive'\n  elif n < 0:\n    return 'negative'\n  else:\n    return 'zero'"}
{"query":"Create a function that uses a for loop with a break statement to find the first negative number in a list.","code":"def find_first_negative(numbers):\n  for num in numbers:\n    if num < 0:\n      return num\n      break\n  return None"}
{"query":"This function demonstrates using a for loop with a continue statement to skip even numbers.","code":"def print_odd_numbers(numbers):\n  for num in numbers:\n    if num % 2 == 0:\n      continue\n    print(num)"}
{"query":"This code creates a function using lambda to add two numbers together.","code":"add = lambda x, y: x + y"}
{"query":"Create a function that takes a list and returns a new list with only the even numbers.","code":"def get_even_numbers(numbers):\n  return [num for num in numbers if num % 2 == 0]"}
{"query":"This code uses list comprehension to generate a list of squares for numbers from 1 to 5.","code":"squares = [x*x for x in range(1, 6)]"}
{"query":"This function defines a generator function to yield even numbers.","code":"def even_numbers(limit):\n  for i in range(0, limit, 2):\n    yield i"}
{"query":"Create a simple class representing a Dog with attributes for name and breed.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed"}
{"query":"Instantiate a Dog object named 'Buddy' of breed 'Golden Retriever'.","code":"buddy = Dog(\"Buddy\", \"Golden Retriever\")"}
{"query":"Define a method within the Dog class to make the dog bark.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed def bark(self): return \"Woof!\""}
{"query":"Call the bark method on the Buddy object.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed def bark(self): return \"Woof!\" buddy = Dog(\"Buddy\", \"Golden Retriever\") buddy.bark()"}
{"query":"Create a subclass called 'Poodle' that inherits from the 'Dog' class.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed class Poodle(Dog): pass"}
{"query":"Override the bark method in the Poodle class to return a different sound.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed def bark(self): return \"Woof!\" class Poodle(Dog): def bark(self): return \"Yip!\""}
{"query":"Demonstrate polymorphism by calling the bark method on both Dog and Poodle objects.","code":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed def bark(self): return \"Woof!\" class Poodle(Dog): def bark(self): return \"Yip!\" dog = Dog(\"Generic\", \"Mixed\") poodle = Poodle(\"Fluffy\", \"Toy\") dog.bark() poodle.bark()"}
{"query":"Define a class with a private attribute using a double underscore prefix.","code":"class MyClass: def __init__(self): self.__private_var = 10"}
{"query":"Access a private attribute from within the class.","code":"class MyClass: def __init__(self): self.__private_var = 10 def get_private(self): return self.__private_var"}
{"query":"Attempt to access a private attribute from outside the class (demonstrating name mangling).","code":"class MyClass: def __init__(self): self.__private_var = 10 obj = MyClass() obj._MyClass__private_var"}
{"query":"Create a class attribute shared by all instances of the class.","code":"class MyClass: class_var = 0 def __init__(self): MyClass.class_var += 1"}
{"query":"Show how to access the class attribute from an instance.","code":"class MyClass: class_var = 0 def __init__(self): MyClass.class_var += 1 obj = MyClass() obj.class_var"}
{"query":"Create a static method within a class.","code":"class MyClass: @staticmethod def my_static_method(): return \"Static method called\""}
{"query":"Call the static method without needing an instance.","code":"class MyClass: @staticmethod def my_static_method(): return \"Static method called\" MyClass.my_static_method()"}
{"query":"Demonstrate inheritance using multiple classes with a common superclass.","code":"class Animal: def __init__(self, name): self.name = name class Dog(Animal): def __init__(self, name, breed): super().__init__(name) self.breed = breed"}
{"query":"Implement an abstract method in a base class.","code":"from abc import ABC, abstractmethod class Shape(ABC): @abstractmethod def area(self): pass"}
{"query":"Create a simple class representing a dog with attributes for name and breed.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed"}
{"query":"Define a method within the Dog class to make the dog bark.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")"}
{"query":"Instantiate a Dog object and access its name attribute.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n\ndog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(dog.name)"}
{"query":"Demonstrate inheritance by creating a class Cat that inherits from the Animal class.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\nclass Cat(Animal):\n    def __init__(self, name):\n        super().__init__(name)"}
{"query":"Override a method in a subclass to provide specific behavior.","code":"class Animal:\n    def make_sound(self):\n        print(\"Generic sound\")\nclass Cat(Animal):\n    def make_sound(self):\n        print(\"Meow\")"}
{"query":"Implement encapsulation by making an attribute private.","code":"class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance\n    def get_balance(self):\n        return self.__balance"}
{"query":"Create a class method to access or modify class-level attributes.","code":"class MyClass:\n    class_variable = 0\n    @classmethod\n    def set_class_variable(cls, value):\n        cls.class_variable = value"}
{"query":"Use a static method within a class to perform a utility function.","code":"class MathHelper:\n    @staticmethod\n    def add(x, y):\n        return x + y"}
{"query":"Demonstrate polymorphism by calling the same method on different objects.","code":"class Animal:\n    def speak(self):\n        pass\nclass Dog(Animal):\n    def speak(self):\n        print(\"Woof\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Meow\")"}
{"query":"Create a class representing a rectangle and calculate its area.","code":"class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height"}
{"query":"Create a class representing a circle with a method to calculate its area.","code":"import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return math.pi * self.radius**2"}
{"query":"Implement multiple inheritance with two parent classes.","code":"class Flyable:\n    pass\nclass Swimmable:\n    pass\nclass Duck(Flyable, Swimmable):\n    pass"}
{"query":"Use the `isinstance()` function to check the type of an object.","code":"class Animal:\n    pass\nclass Dog(Animal):\n    pass\ndog = Dog()\nprint(isinstance(dog, Animal))"}
{"query":"Demonstrate the use of the `super()` function to call a parent class's method.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed"}
{"query":"Create abstract method using abc module.","code":"from abc import ABC, abstractmethod\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self): pass"}
{"query":"Use a property to control access to an attribute and add validation.","code":"class Person:\n    def __init__(self, age):\n        self._age = age\n    @property\n    def age(self):\n        return self._age\n    @age.setter\n    def age(self, value):\n        if value > 0:\n            self._age = value"}
{"query":"Create a simple class representing a Dog with attributes for name and breed.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed"}
{"query":"Define a method within the Dog class to make the dog bark.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")"}
{"query":"Instantiate a Dog object and print its name.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")\ndog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(dog.name)"}
{"query":"Implement inheritance by creating a class called \"Animal\" and a subclass \"Dog\" that inherits from it.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed"}
{"query":"Override a method in the Dog class that was originally defined in the Animal class.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\n    def speak(self):\n        print(\"Generic animal sound\")\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed\n    def speak(self):\n        print(\"Woof!\")"}
{"query":"Demonstrate polymorphism by creating a function that takes an Animal object and calls its speak method.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\n    def speak(self):\n        print(\"Generic animal sound\")\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed\n    def speak(self):\n        print(\"Woof!\")\ndef make_it_speak(animal):\n    animal.speak()"}
{"query":"Define a class with a private attribute and provide a getter method to access its value.","code":"class MyClass:\n    def __init__(self, value):\n        self.__private_attribute = value\n    def get_private_attribute(self):\n        return self.__private_attribute"}
{"query":"Define a class with a private attribute and provide a setter method to modify its value.","code":"class MyClass:\n    def __init__(self, value):\n        self.__private_attribute = value\n    def set_private_attribute(self, value):\n        self.__private_attribute = value"}
{"query":"Create a class method that can be called without instantiating the class.","code":"class MyClass:\n    @classmethod\n    def class_method(cls):\n        print(\"This is a class method\")"}
{"query":"Create a static method within a class.","code":"class MyClass:\n    @staticmethod\n    def static_method():\n        print(\"This is a static method\")"}
{"query":"Use the isinstance() function to check if an object is an instance of a particular class.","code":"class Dog:\n    pass\ndog = Dog()\nprint(isinstance(dog, Dog))"}
{"query":"Define an abstract class with an abstract method.","code":"from abc import ABC, abstractmethod\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self): pass"}
{"query":"Implement multiple inheritance by creating a class that inherits from two different classes.","code":"class ClassA:\n    pass\nclass ClassB:\n    pass\nclass ClassC(ClassA, ClassB):\n    pass"}
{"query":"Use the super() function to call a method from the parent class in a child class.","code":"class Parent:\n    def method(self):\n        print(\"Parent method\")\nclass Child(Parent):\n    def method(self):\n        super().method()\n        print(\"Child method\")"}
{"query":"Create a simple example of operator overloading using the __add__ method.","code":"class Number:\n    def __init__(self, value):\n        self.value = value\n    def __add__(self, other):\n        return Number(self.value + other.value)"}
{"query":"Create a simple example of composition by creating a class that contains an instance of another class.","code":"class Engine:\n    def start(self):\n        print(\"Engine started\")\nclass Car:\n    def __init__(self):\n        self.engine = Engine()\n    def drive(self):\n        self.engine.start()\n        print(\"Car is driving\")"}
{"query":"Create a simple class named 'Dog' with attributes for name and breed.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed"}
{"query":"Instantiate a 'Dog' object with the name 'Buddy' and breed 'Golden Retriever'.","code":"dog = Dog('Buddy', 'Golden Retriever')"}
{"query":"Define a method called 'bark' within the 'Dog' class.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print('Woof!')"}
{"query":"Call the 'bark' method on the 'Dog' object.","code":"dog.bark()"}
{"query":"Implement inheritance by creating a 'Poodle' class that inherits from 'Dog'.","code":"class Poodle(Dog):\n    def __init__(self, name, color):\n        super().__init__(name, 'Poodle')\n        self.color = color"}
{"query":"Override the 'bark' method in the 'Poodle' class.","code":"class Poodle(Dog):\n    def __init__(self, name, color):\n        super().__init__(name, 'Poodle')\n        self.color = color\n    def bark(self):\n        print('Yip!')"}
{"query":"Create a 'Cat' class and add a method 'meow'.","code":"class Cat:\n    def __init__(self, name):\n        self.name = name\n    def meow(self):\n        print('Meow!')"}
{"query":"Demonstrate polymorphism by calling 'bark' or 'meow' on different objects.","code":"dog = Dog('Rover', 'Labrador')\ncat = Cat('Whiskers')\ndog.bark()\ncat.meow()"}
{"query":"Use encapsulation to make the 'name' attribute of the 'Dog' class private.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.__name = name\n        self.breed = breed\n    def get_name(self):\n        return self.__name"}
{"query":"Create a getter method to access the private 'name' attribute of the 'Dog' class.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.__name = name\n        self.breed = breed\n    def get_name(self):\n        return self.__name"}
{"query":"Create a setter method to modify the 'name' attribute of the 'Dog' class.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.__name = name\n        self.breed = breed\n    def set_name(self, new_name):\n        self.__name = new_name"}
{"query":"Illustrate method overriding in a subclass.","code":"class Animal:\n    def speak(self):\n        print('Generic animal sound')\n\nclass Dog(Animal):\n    def speak(self):\n        print('Woof')"}
{"query":"Create an abstract class with an abstract method.","code":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass"}
{"query":"Implement a concrete class that inherits from the abstract class.","code":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius * self.radius"}
{"query":"Show how to use the `isinstance()` function to check object types.","code":"dog = Dog('Fido', 'Poodle')\nprint(isinstance(dog, Dog))"}
{"query":"Create a class with a static method.","code":"class MathHelper:\n    @staticmethod\n    def add(x, y):\n        return x + y"}
{"query":"Create a class named `Dog` with attributes for `name` and `breed`.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed"}
{"query":"Instantiate an object of the `Dog` class with a name and breed.","code":"dog = Dog(\"Buddy\", \"Golden Retriever\")"}
{"query":"Define a method called `bark` within the `Dog` class that prints a bark sound.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")"}
{"query":"Call the `bark` method on a `Dog` object.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")\ndog = Dog(\"Buddy\", \"Golden Retriever\")\ndog.bark()"}
{"query":"Create a `Cat` class inheriting from a base `Animal` class.","code":"class Animal:\n    pass\nclass Cat(Animal):\n    pass"}
{"query":"Demonstrate inheritance by having the `Cat` class inherit an `Animal` class's method.","code":"class Animal:\n    def speak(self):\n        print(\"Generic animal sound\")\nclass Cat(Animal):\n    pass\ncat = Cat()\ncat.speak()"}
{"query":"Override a method in the `Cat` class to provide a specific implementation.","code":"class Animal:\n    def speak(self):\n        print(\"Generic animal sound\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Meow!\")\ncat = Cat()\ncat.speak()"}
{"query":"Define a `Car` class and use encapsulation to protect its `speed` attribute.","code":"class Car:\n    def __init__(self):\n        self._speed = 0\n    def get_speed(self):\n        return self._speed"}
{"query":"Create a getter method to access the `speed` attribute of the `Car` class.","code":"class Car:\n    def __init__(self):\n        self._speed = 0\n    def get_speed(self):\n        return self._speed\ncar = Car()\nspeed = car.get_speed()"}
{"query":"Define a setter method to modify the `speed` attribute of the `Car` class.","code":"class Car:\n    def __init__(self):\n        self._speed = 0\n    def get_speed(self):\n        return self._speed\n    def set_speed(self, speed):\n        self._speed = speed"}
{"query":"Implement polymorphism by having different classes respond to the same method call.","code":"class Animal:\n    def make_sound(self):\n        pass\nclass Dog(Animal):\n    def make_sound(self):\n        print(\"Woof!\")\nclass Cat(Animal):\n    def make_sound(self):\n        print(\"Meow!\")"}
{"query":"Demonstrate polymorphism by calling the same method on different object types.","code":"class Animal:\n    def make_sound(self):\n        pass\nclass Dog(Animal):\n    def make_sound(self):\n        print(\"Woof!\")\nclass Cat(Animal):\n    def make_sound(self):\n        print(\"Meow!\")\ndog = Dog()\ncat = Cat()\ndog.make_sound()\ncat.make_sound()"}
{"query":"Create an abstract class with an abstract method.","code":"from abc import ABC, abstractmethod\nclass Shape(ABC):\n    @abstractmethod\n    def area(self): \n        pass"}
{"query":"Implement a concrete class that inherits from an abstract class.","code":"from abc import ABC, abstractmethod\nclass Shape(ABC):\n    @abstractmethod\n    def area(self): \n        pass\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius * self.radius"}
{"query":"Create a class `BankAccount` using composition with a `Transaction` class.","code":"class Transaction:\n    def __init__(self, amount):\n        self.amount = amount\nclass BankAccount:\n    def __init__(self):\n        self.transactions = []\n    def add_transaction(self, transaction): \n        self.transactions.append(transaction)"}
{"query":"Use composition to add a `Transaction` to a `BankAccount` object.","code":"class Transaction:\n    def __init__(self, amount):\n        self.amount = amount\nclass BankAccount:\n    def __init__(self):\n        self.transactions = []\n    def add_transaction(self, transaction): \n        self.transactions.append(transaction)\nbank_account = BankAccount()\ntransaction = Transaction(100)\nbank_account.add_transaction(transaction)"}
{"query":"Create a class representing a simple Dog with attributes for name and breed.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed"}
{"query":"Instantiate a Dog object named 'Buddy' of breed 'Golden Retriever'.","code":"buddy = Dog(\"Buddy\", \"Golden Retriever\")"}
{"query":"Define a method within the Dog class to make the dog bark.","code":"class Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n    def bark(self):\n        print(\"Woof!\")"}
{"query":"Call the bark method on the Buddy object.","code":"buddy.bark()"}
{"query":"Create a class representing a Cat inheriting from an Animal class.","code":"class Animal:\n    def __init__(self, name):\n        self.name = name\nclass Cat(Animal):\n    def __init__(self, name, color):\n        super().__init__(name)\n        self.color = color"}
{"query":"Implement a method in the Cat class to make the cat meow.","code":"class Cat(Animal):\n    def __init__(self, name, color):\n        super().__init__(name)\n        self.color = color\n    def meow(self):\n        print(\"Meow!\")"}
{"query":"Create a base class 'Shape' with an area method.","code":"class Shape:\n    def area(self):\n        pass"}
{"query":"Create a 'Rectangle' class that inherits from 'Shape' and calculates area.","code":"class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height"}
{"query":"Define a method to get the name attribute of a Dog instance.","code":"class Dog:\n    def __init__(self, name):\n        self.name = name\n    def get_name(self):\n        return self.name"}
{"query":"Create a class representing a 'Car' with attributes for make and model, and a method to display details.","code":"class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n    def display_details(self):\n        print(f\"Make: {self.make}, Model: {self.model}\")"}
{"query":"Create a Car object and call the display details method.","code":"my_car = Car(\"Toyota\", \"Camry\")\nmy_car.display_details()"}
{"query":"Implement encapsulation in a class by making an attribute private using a leading underscore.","code":"class Example:\n    def __init__(self):\n        self._private_var = 10"}
{"query":"Demonstrate polymorphism by creating a generic function that calls an area method, applicable to any Shape.","code":"def get_area(shape):\n    return shape.area()"}
{"query":"Create a class 'Circle' that inherits from 'Shape' and calculates area using pi and radius.","code":"import math\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return math.pi * self.radius**2"}
{"query":"Show inheritance by making a 'SportsCar' class inherit from 'Car' and add a specific attribute.","code":"class SportsCar(Car):\n    def __init__(self, make, model, top_speed):\n        super().__init__(make, model)\n        self.top_speed = top_speed"}
{"query":"Illustrate method overriding in 'SportsCar' by redefining the display details to include top speed.","code":"class SportsCar(Car):\n    def __init__(self, make, model, top_speed):\n        super().__init__(make, model)\n        self.top_speed = top_speed\n    def display_details(self):\n        print(f\"Make: {self.make}, Model: {self.model}, Top Speed: {self.top_speed}\")"}
{"query":"This code snippet demonstrates a simple HTTP server that responds with 'Hello, World!' to any request.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"The code sets up a basic HTTP server that serves a static HTML file.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nserver_address = ('', 8000)\nhttpd = HTTPServer(server_address, SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a web server that handles GET requests and serves a custom response based on the requested path.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport urllib.parse\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed_path = urllib.parse.urlparse(self.path)\n        if parsed_path.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<html><body><h1>Home</h1></body></html>')\n        else:\n            self.send_response(404)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'Not Found')\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This program creates a web server that logs incoming requests to the console.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass RequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        print(f'Request received: {self.path}')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'OK')\nhttpd = HTTPServer(('localhost', 8000), RequestHandler)\nhttpd.serve_forever()"}
{"query":"This code implements a web server that handles POST requests and prints the received data.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        print(f'Received data: {post_data.decode()}')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Data received')\nhttpd = HTTPServer(('localhost', 8000), PostHandler)\nhttpd.serve_forever()"}
{"query":"The code creates a simple server that redirects requests to another URL.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass RedirectHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(301)\n        self.send_header('Location', 'https://www.example.com')\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), RedirectHandler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a web server that handles requests and sets custom headers in the response.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass CustomHeaderHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('X-Custom-Header', 'Custom Value')\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello')\nhttpd = HTTPServer(('localhost', 8000), CustomHeaderHandler)\nhttpd.serve_forever()"}
{"query":"The code sets up a web server that handles requests and serves content from a specified directory.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\n\nos.chdir('path/to/your/directory')\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"The code shows a web server implementation that serves different responses based on the HTTP method used.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass MethodHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'GET request received')\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'POST request received')\nhttpd = HTTPServer(('localhost', 8000), MethodHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server that handles requests and sets a custom cookie in the response.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass CookieHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Set-Cookie', 'mycookie=value')\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello')\nhttpd = HTTPServer(('localhost', 8000), CookieHandler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a web server that handles GET requests and sends a JSON response.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\nclass JsonHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        data = {'message': 'Hello from JSON'}\n        json_data = json.dumps(data).encode('utf-8')\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json_data)\nhttpd = HTTPServer(('localhost', 8000), JsonHandler)\nhttpd.serve_forever()"}
{"query":"The code presents a simple web server that handles requests with a basic form of authentication.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport base64\nclass AuthHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        auth_header = self.headers.get('Authorization')\n        if auth_header:\n            auth_type, auth_string = auth_header.split(' ', 1)\n            if auth_type == 'Basic':\n                decoded_auth = base64.b64decode(auth_string).decode()\n                username, password = decoded_auth.split(':', 1)\n                if username == 'user' and password == 'password':\n                    self.send_response(200)\n                    self.send_header('Content-type', 'text/plain')\n                    self.end_headers()\n                    self.wfile.write(b'Authenticated')\n                    return\n        self.send_response(401)\n        self.send_header('WWW-Authenticate', 'Basic realm=\"Test\"')\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), AuthHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server that handles file uploads through POST requests.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport cgi\nclass UploadHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        form = cgi.FieldStorage(fp=self.rfile, headers=self.headers,\n                              environ={'REQUEST_METHOD': 'POST',\n                                       'CONTENT_TYPE': self.headers['Content-Type'],})\n        for field in form.keys():\n            field_item = form[field]\n            if field_item.filename:\n                with open(field_item.filename, 'wb') as f:\n                    f.write(field_item.file.read())\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'File uploaded')\nhttpd = HTTPServer(('localhost', 8000), UploadHandler)\nhttpd.serve_forever()"}
{"query":"This code sets up a web server that uses a ThreadingHTTPServer to handle multiple requests concurrently.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom socketserver import ThreadingMixIn\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    pass\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\nhttpd = ThreadedHTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This code shows how to create a web server that serves compressed content using gzip.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport gzip\nfrom io import BytesIO\nclass GzipHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        content = b'This is compressed content!'\n        f = BytesIO()\n        with gzip.GzipFile(mode='wb', fileobj=f) as gz:\n            gz.write(content)\n        compressed_content = f.getvalue()\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.send_header('Content-Encoding', 'gzip')\n        self.end_headers()\n        self.wfile.write(compressed_content)\nhttpd = HTTPServer(('localhost', 8000), GzipHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet implements a simple web server with basic rate limiting to prevent abuse.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport time\nfrom collections import defaultdict\nclass RateLimitHandler(BaseHTTPRequestHandler):\n    def __init__(self, *args, **kwargs):\n        self.requests = defaultdict(lambda: {'count': 0, 'timestamp': 0})\n        super().__init__(*args, **kwargs)\n    def do_GET(self):\n        ip = self.client_address[0]\n        now = time.time()\n        if now - self.requests[ip]['timestamp'] > 60:\n            self.requests[ip]['count'] = 0\n            self.requests[ip]['timestamp'] = now\n        if self.requests[ip]['count'] < 5:\n            self.requests[ip]['count'] += 1\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'OK')\n        else:\n            self.send_response(429)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'Too Many Requests')\nhttpd = HTTPServer(('localhost', 8000), RateLimitHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet creates a basic HTTP server.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b'Hello, world!')\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This snippet defines a simple GET request handler.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b'<!DOCTYPE html><html><body><h1>GET Request Handled</h1></body></html>')"}
{"query":"This code handles POST requests and echos the received data.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_POST(self):\n    content_length = int(self.headers['Content-Length'])\n    post_data = self.rfile.read(content_length)\n    self.send_response(200)\n    self.send_header('Content-type', 'application/json')\n    self.end_headers()\n    self.wfile.write(post_data)"}
{"query":"This code sets up a basic HTTP server on a specified port.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/plain')\n    self.end_headers()\n    self.wfile.write(b'Server running!')\nhttpd = HTTPServer(('localhost', 8001), MyHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet returns an HTML response.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n    self.wfile.write(b'<html><body><h1>HTML Response</h1></body></html>')"}
{"query":"This code snippet handles a specific URL path.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    if self.path == '/':\n      self.send_response(200)\n      self.send_header('Content-type', 'text/plain')\n      self.end_headers()\n      self.wfile.write(b'Home Page')\n    else:\n      self.send_response(404)\n      self.end_headers()"}
{"query":"This code shows how to read request headers.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/plain')\n    self.end_headers()\n    self.wfile.write(str(self.headers).encode())"}
{"query":"This code snippet handles file serving.","code":"from http.server import BaseHTTPRequestHandler\nimport os\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.path = '/index.html'\n        try:\n            with open(self.path[1:], 'rb') as f:\n                self.send_response(200)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(f.read())\n        except FileNotFoundError:\n            self.send_response(404)\n            self.end_headers()"}
{"query":"This code demonstrates how to handle different HTTP methods.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'GET Request')\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'POST Request')"}
{"query":"This code sets up a server that logs requests.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        print(f'Request received: {self.path}')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Logged!')\nhttpd = HTTPServer(('localhost', 8002), MyHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates how to set a custom header.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('X-Custom-Header', 'Custom Value')\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Custom Header Set')"}
{"query":"This snippet serves static files from a specified directory.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\nDIRECTORY = 'public'\nos.chdir(DIRECTORY)\nhttpd = HTTPServer(('localhost', 8003), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"This code redirects a user to a different URL.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(301)\n        self.send_header('Location', 'https://www.example.com')\n        self.end_headers()"}
{"query":"This code snippet handles basic error responses.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/error':\n            self.send_response(500)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'Internal Server Error')\n        else:\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'OK')"}
{"query":"This code provides a basic implementation of server-sent events.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport time\nclass SSEHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/event-stream')\n        self.send_header('Cache-Control', 'no-cache')\n        self.end_headers()\n        for i in range(10):\n            self.wfile.write(f'data: {i}\\n\\n'.encode())\n            self.wfile.flush()\n            time.sleep(1)\nhttpd = HTTPServer(('localhost', 8004), SSEHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates how to handle a PUT request.","code":"from http.server import BaseHTTPRequestHandler\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_PUT(self):\n        content_length = int(self.headers['Content-Length'])\n        data = self.rfile.read(content_length)\n        print(f'Received data: {data.decode()}')\n        self.send_response(200)\n        self.end_headers()"}
{"query":"This code defines a simple HTTP server that responds with 'Hello, world!' to all requests.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet sets up a basic web server using Flask framework.","code":"from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"This code demonstrates handling GET requests in a Flask web application.","code":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/get_data', methods=['GET'])\ndef get_data():\n    args = request.args\n    return f'Received data: {args.get(\"param\", \"default\")}'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"The code serves static HTML files from a specified directory using Python's built-in server.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\n\nclass MyHandler(SimpleHTTPRequestHandler):\n    def translate_path(self, path):\n        return super().translate_path(path)\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a simple web server using the `socket` module to listen for and respond to incoming HTTP requests.","code":"import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8000))\nserver_socket.listen(1)\n\nwhile True:\n    client_socket, address = server_socket.accept()\n    request = client_socket.recv(1024).decode()\n    http_response = \"HTTP/1.1 200 OK\\n\\nHello, socket world!\" \n    client_socket.sendall(http_response.encode())\n    client_socket.close()"}
{"query":"This code demonstrates how to handle POST requests in a Flask application, receiving data from a form.","code":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/post_data', methods=['POST'])\ndef post_data():\n    data = request.form\n    return f'Received data: {data.get(\"name\", \"\")}'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"This code shows how to create a basic server using the `http.server` module.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This code displays how to define routes and handle requests with different HTTP methods in Flask.","code":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        return 'Received POST request'\n    else:\n        return 'Received GET request'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"The provided code shows how to create a basic web server and serve a specific file using Python's built-in server.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\n\nclass MyHandler(SimpleHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.path = '/index.html'\n        return SimpleHTTPRequestHandler.do_GET(self)\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This script creates a simple web server using `http.server` and customizes the response.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass CustomHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Custom Response</h1></body></html>')\n\nhttpd = HTTPServer(('localhost', 8000), CustomHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet sets up a basic Flask application that serves a simple HTML file.","code":"from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"This program creates a minimal web server in Python, demonstrating the use of the `http.server` module.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'A simple web server response.')\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"The code handles different request paths, serving different content based on the requested URL using Flask.","code":"from flask import Flask\napp = Flask(__name__)\n\n@app.route('/home')\ndef home():\n    return 'Welcome to the home page!'\n\n@app.route('/about')\ndef about():\n    return 'About us page'\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"This Python code example uses the built-in `http.server` module to create a basic file server.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a Flask web application and demonstrates how to return JSON data.","code":"from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/json_data')\ndef get_json():\n    data = {'message': 'Hello, JSON!'}\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"The following code demonstrates how to use a template engine to render dynamic content in Flask.","code":"from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/user/<username>')\ndef profile(username):\n    return render_template('profile.html', username=username)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"query":"This code snippet creates a simple HTTP server that listens on port 8000.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Hello, world!</h1></body></html>')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"This code sets up a basic web server that serves static HTML files.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"The Python code handles GET requests and returns a simple HTML response.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<html><body><h1>Hello</h1></body></html>')\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"The following code defines a custom handler for a web server that logs requests.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass RequestHandler(BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        print(f'{self.address_string()} - - [{self.log_date_time_string()}] {format % args}')\n\nhttpd = HTTPServer(('localhost', 8000), RequestHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server that handles different HTTP methods.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'GET request received')\n\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'POST request received')\n\nhttpd = HTTPServer(('localhost', 8000), Handler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a simple web server that responds to requests with a specific content type.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'This is a text response.')\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"The provided Python code sets up a web server to handle multiple requests concurrently.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport threading\n\nclass ThreadedHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Hello from a thread!')\n\n\ndef run_server(server_class=HTTPServer, handler_class=ThreadedHandler, port=8000):\n    server_address = ('', port)\n    httpd = server_class(server_address, handler_class)\n    httpd.serve_forever()\n\nthreading.Thread(target=run_server).start()"}
{"query":"The code implements a web server with basic routing for different URL paths.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<html><body><h1>Home</h1></body></html>')\n        elif self.path == '/about':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<html><body><h1>About</h1></body></html>')\n        else:\n            self.send_response(404)\n            self.end_headers()\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates how to serve different content types from a web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<html><body><h1>Home</h1></body></html>')\n        elif self.path == '/image.png':\n            self.send_response(200)\n            self.send_header('Content-type', 'image/png')\n            self.end_headers()\n            self.wfile.write(b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\nIDATx\\x9cc\\xfc\\xff\\xff?\\x03\\x00\\x00\\x07\\x03\\xc4\\x04\\x04\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82')\n        else:\n            self.send_response(404)\n            self.end_headers()\n\nhttpd = HTTPServer(('localhost', 8000), MyHandler)\nhttpd.serve_forever()"}
{"query":"The code provides an example of how to implement basic authentication in a web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom base64 import b64decode\n\nclass AuthHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        auth_header = self.headers.get('Authorization')\n        if auth_header:\n            auth_type, encoded_credentials = auth_header.split(' ')\n            if auth_type == 'Basic':\n                decoded_credentials = b64decode(encoded_credentials).decode('utf-8')\n                username, password = decoded_credentials.split(':')\n                if username == 'user' and password == 'password':\n                    self.send_response(200)\n                    self.send_header('Content-type', 'text/plain')\n                    self.end_headers()\n                    self.wfile.write(b'Authenticated')\n                    return\n        self.send_response(401)\n        self.send_header('WWW-Authenticate', 'Basic realm=\"Auth\"')\n        self.end_headers()"}
{"query":"This code illustrates the handling of POST requests to receive data.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        print(f'Received: {post_data.decode()}')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Data received')\n\nhttpd = HTTPServer(('localhost', 8000), PostHandler)\nhttpd.serve_forever()"}
{"query":"The Python code shows how to use the request headers in the web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass HeaderHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        print(self.headers)\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Headers printed to console')\n\nhttpd = HTTPServer(('localhost', 8000), HeaderHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates the use of cookies in a simple web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass CookieHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if 'Cookie' in self.headers:\n            cookie = self.headers['Cookie']\n            print(f'Cookie: {cookie}')\n        self.send_response(200)\n        self.send_header('Set-Cookie', 'mycookie=value')\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Cookie set')\n\nhttpd = HTTPServer(('localhost', 8000), CookieHandler)\nhttpd.serve_forever()"}
{"query":"The code snippet implements a simple web server that handles file uploads.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport os\n\nclass UploadHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        if self.path == '/upload':\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            with open('uploaded_file.txt', 'wb') as f:\n                f.write(post_data)\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'File uploaded')\n        else:\n            self.send_response(404)\n            self.end_headers()\n\nhttpd = HTTPServer(('localhost', 8000), UploadHandler)\nhttpd.serve_forever()"}
{"query":"The Python code shows how to redirect a request to another URL in a web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass RedirectHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(302)\n        self.send_header('Location', 'http://www.example.com')\n        self.end_headers()\n\nhttpd = HTTPServer(('localhost', 8000), RedirectHandler)\nhttpd.serve_forever()"}
{"query":"This example creates a web server that shows how to use the server name and client address.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass InfoHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        server_name = self.server.server_name\n        client_address = self.client_address\n        response_text = f'Server: {server_name}\\nClient: {client_address}'\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(response_text.encode())\n\nhttpd = HTTPServer(('localhost', 8000), InfoHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet sets up a basic HTTP server that responds with 'Hello, world!' to all requests.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"The following code serves static HTML files from a specified directory using Python's built-in HTTP server.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\n\nos.chdir('www')\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates how to create a simple web server that handles POST requests and prints the received data.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        print(post_data.decode('utf-8'))\n        self.send_response(200)\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), PostHandler)\nhttpd.serve_forever()"}
{"query":"This code provides a basic example of serving JSON data from a web server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\nclass JsonHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        data = {'message': 'Hello, JSON!'}\n        self.wfile.write(json.dumps(data).encode('utf-8'))\nhttpd = HTTPServer(('localhost', 8000), JsonHandler)\nhttpd.serve_forever()"}
{"query":"This code showcases how to implement a simple web server that redirects requests to another URL.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass RedirectHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(301)\n        self.send_header('Location', 'https://www.example.com')\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), RedirectHandler)\nhttpd.serve_forever()"}
{"query":"The following code is an example of a basic web server with URL routing, handling different paths.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass RoutingHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<h1>Home</h1>')\n        elif self.path == '/about':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(b'<h1>About</h1>')\n        else:\n            self.send_response(404)\n            self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), RoutingHandler)\nhttpd.serve_forever()"}
{"query":"This Python code implements a web server that handles file uploads and saves them to the server.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport cgi\nclass UploadHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        form = cgi.FieldStorage(\n            fp=self.rfile,\n            headers=self.headers,\n            environ={'REQUEST_METHOD':'POST'}\n        )\n        with open(form['file'].filename, 'wb') as f:\n            f.write(form['file'].file.read())\n        self.send_response(200)\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), UploadHandler)\nhttpd.serve_forever()"}
{"query":"This example demonstrates a web server that uses basic authentication to protect access to a resource.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport base64\nclass AuthHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        auth_header = self.headers.get('Authorization')\n        if auth_header:\n            auth_type, auth_encoded = auth_header.split(' ')\n            if auth_type == 'Basic':\n                decoded = base64.b64decode(auth_encoded).decode('utf-8')\n                username, password = decoded.split(':')\n                if username == 'user' and password == 'password':\n                    self.send_response(200)\n                    self.end_headers()\n                    self.wfile.write(b'<h1>Authenticated</h1>')\n                    return\n        self.send_response(401)\n        self.send_header('WWW-Authenticate', 'Basic realm=\"Protected Area\"')\n        self.end_headers()"}
{"query":"This code creates a simple web server that logs all incoming requests to the console.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass LoggingHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        print(f'Request: {self.path}')\n        self.send_response(200)\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), LoggingHandler)\nhttpd.serve_forever()"}
{"query":"This snippet sets up a web server that handles requests with a custom response header.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass HeaderHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('X-Custom-Header', 'Custom Value')\n        self.end_headers()\n        self.wfile.write(b'Hello!')\nhttpd = HTTPServer(('localhost', 8000), HeaderHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates a web server that serves content based on the requested HTTP method.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass MethodHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'GET request handled')\n    def do_POST(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'POST request handled')\nhttpd = HTTPServer(('localhost', 8000), MethodHandler)\nhttpd.serve_forever()"}
{"query":"This Python code example shows how to implement a web server that sets and retrieves cookies.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom http import cookies\nclass CookieHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        cookie = cookies.SimpleCookie()\n        if 'Cookie' in self.headers:\n            cookie.load(self.headers['Cookie'])\n            if 'mycookie' in cookie:\n                value = cookie['mycookie'].value\n                self.wfile.write(f'Cookie value: {value}'.encode())\n                return\n        cookie['mycookie'] = 'hello'\n        self.send_response(200)\n        self.send_header('Set-Cookie', cookie.output(header='', sep='; '))\n        self.end_headers()\n        self.wfile.write(b'Cookie set')\nhttpd = HTTPServer(('localhost', 8000), CookieHandler)\nhttpd.serve_forever()"}
{"query":"This code is a simple web server that returns the client's IP address.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass IPHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(f'Your IP: {self.client_address[0]}'.encode())\nhttpd = HTTPServer(('localhost', 8000), IPHandler)\nhttpd.serve_forever()"}
{"query":"The code creates a web server that serves files based on their content type.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport mimetypes\nimport os\nclass ContentTypeHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        filepath = self.path[1:]\n        if os.path.exists(filepath) and os.path.isfile(filepath):\n            mimetype, _ = mimetypes.guess_type(filepath)\n            self.send_response(200)\n            self.send_header('Content-type', mimetype)\n            self.end_headers()\n            with open(filepath, 'rb') as f:\n                self.wfile.write(f.read())\n        else:\n            self.send_response(404)\n            self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), ContentTypeHandler)\nhttpd.serve_forever()"}
{"query":"This Python code demonstrates a web server that implements rate limiting to prevent abuse.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport time\nrequests = {}\nclass RateLimitHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        client_ip = self.client_address[0]\n        now = time.time()\n        if client_ip not in requests:\n            requests[client_ip] = [now]\n        else:\n            recent_requests = [t for t in requests[client_ip] if now - t < 60]\n            if len(recent_requests) >= 5:\n                self.send_response(429)\n                self.end_headers()\n                return\n            requests[client_ip] = recent_requests + [now]\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'OK')\nhttpd = HTTPServer(('localhost', 8000), RateLimitHandler)\nhttpd.serve_forever()"}
{"query":"This example provides a web server that uses threading to handle multiple requests concurrently.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom threading import Thread\nclass ThreadedHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        Thread(target=self._handle_request).start()\n    def _handle_request(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'Handled by a thread')\nhttpd = HTTPServer(('localhost', 8000), ThreadedHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a basic HTTP server that listens on port 8000 and responds with 'Hello, world!'.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"This code snippet sets up a simple web server serving static files from the 'static' directory.","code":"from http.server import SimpleHTTPRequestHandler, HTTPServer\nimport os\nos.chdir('static')\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"}
{"query":"This code handles HTTP GET requests and returns a JSON response.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\nclass JSONHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        response_data = {'message': 'Success'}\n        self.wfile.write(json.dumps(response_data).encode('utf-8'))\nhttpd = HTTPServer(('localhost', 8000), JSONHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates a simple HTTP POST request handler that reads data from the request body.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Data received.')\nhttpd = HTTPServer(('localhost', 8000), PostHandler)\nhttpd.serve_forever()"}
{"query":"The code implements a simple HTTP server that logs incoming requests to the console.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass LoggingHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        print(f'Request received: {self.path}')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Request logged.')\nhttpd = HTTPServer(('localhost', 8000), LoggingHandler)\nhttpd.serve_forever()"}
{"query":"This Python code creates a basic web server that redirects all requests to another URL.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass RedirectHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(301)\n        self.send_header('Location', 'http://example.com')\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), RedirectHandler)\nhttpd.serve_forever()"}
{"query":"This code shows how to implement basic authentication for a web server using a hardcoded username and password.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom base64 import b64decode\nclass AuthHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        auth_header = self.headers.get('Authorization')\n        if auth_header:\n            auth_type, auth_data = auth_header.split(None, 1)\n            if auth_type == 'Basic':\n                username, password = b64decode(auth_data).decode('utf-8').split(':', 1)\n                if username == 'user' and password == 'password':\n                    self.send_response(200)\n                    self.send_header('Content-type', 'text/plain')\n                    self.end_headers()\n                    self.wfile.write(b'Authenticated')\n                    return\n        self.send_response(401)\n        self.send_header('WWW-Authenticate', 'Basic realm=\"Auth Required\"')\n        self.end_headers()\nhttpd = HTTPServer(('localhost', 8000), AuthHandler)\nhttpd.serve_forever()"}
{"query":"This code demonstrates a simple server that serves different content based on the requested path.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass PathHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/':\n            content = b'<h1>Home</h1>'\n        elif self.path == '/about':\n            content = b'<h1>About Us</h1>'\n        else:\n            content = b'<h1>404 Not Found</h1>'\n            self.send_response(404)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(content)\nhttpd = HTTPServer(('localhost', 8000), PathHandler)\nhttpd.serve_forever()"}
{"query":"This code shows how to implement a simple web server that handles file uploads.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport cgi\nclass UploadHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        form = cgi.FieldStorage(\n            fp=self.rfile,\n            headers=self.headers,\n            environ={'REQUEST_METHOD': 'POST'}\n        )\n        file_item = form['file']\n        if file_item.filename:\n            with open(file_item.filename, 'wb') as f:\n                f.write(file_item.file.read())\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'File uploaded successfully!')\n        else:\n            self.send_response(400)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'No file uploaded.')\nhttpd = HTTPServer(('localhost', 8000), UploadHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server that handles different HTTP methods, GET and POST.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass MethodHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'GET request received.')\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'POST request received.')\nhttpd = HTTPServer(('localhost', 8000), MethodHandler)\nhttpd.serve_forever()"}
{"query":"This code implements a web server that uses a simple templating engine to generate dynamic HTML content.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass TemplateHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        template = '<h1>Hello, {name}!</h1>'\n        name = 'World'\n        html = template.replace('{name}', name)\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(html.encode('utf-8'))\nhttpd = HTTPServer(('localhost', 8000), TemplateHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server with a timeout to handle slow requests.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport time\nclass TimeoutHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        time.sleep(5)  # Simulate a long-running task\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'Request completed.')\nhttpd = HTTPServer(('localhost', 8000), TimeoutHandler)\nhttpd.serve_forever()"}
{"query":"This code implements a simple web server that serves content with custom headers.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass CustomHeaderHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.send_header('Custom-Header', 'Custom Value')\n        self.end_headers()\n        self.wfile.write(b'Hello with custom header.')\nhttpd = HTTPServer(('localhost', 8000), CustomHeaderHandler)\nhttpd.serve_forever()"}
{"query":"This code creates a web server that limits the number of concurrent connections.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nimport threading\nconnections = threading.Semaphore(5)  # Limit to 5 concurrent connections\nclass ConcurrencyHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        with connections:\n            self.send_response(200)\n            self.send_header('Content-type', 'text/plain')\n            self.end_headers()\n            self.wfile.write(b'Request served.')\nhttpd = HTTPServer(('localhost', 8000), ConcurrencyHandler)\nhttpd.serve_forever()"}
{"query":"This code presents a simple web server that handles basic error scenarios.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass ErrorHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        try:\n            raise Exception('Simulated error')\n        except Exception as e:\n            self.send_error(500, str(e))\nhttpd = HTTPServer(('localhost', 8000), ErrorHandler)\nhttpd.serve_forever()"}
{"query":"This code implements a web server that uses the 'with' statement to ensure resources are properly managed.","code":"from http.server import BaseHTTPRequestHandler, HTTPServer\nclass WithStatementHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        with open('example.txt', 'w') as f:\n            f.write('Example content')\n        self.send_response(200)\n        self.send_header('Content-type', 'text/plain')\n        self.end_headers()\n        self.wfile.write(b'File written successfully.')\nhttpd = HTTPServer(('localhost', 8000), WithStatementHandler)\nhttpd.serve_forever()"}
{"query":"Write a unit test to assert that a function returns the expected result.","code":"assertEqual(my_function(1, 2), 3)"}
{"query":"Create a test case to check if a function raises an exception.","code":"with assertRaises(ValueError):\n    my_function(\"a\", \"b\")"}
{"query":"Implement a unit test that verifies a function's output for different inputs.","code":"for i in range(3):\n    assertEqual(my_function(i), i * 2)"}
{"query":"Test a function that returns a boolean value using assert statements.","code":"assertTrue(my_function(True))"}
{"query":"Develop a test that confirms the correct behavior of a function with a specific set of arguments.","code":"assertEqual(calculate_sum(5, 10), 15)"}
{"query":"Write a test to check if a function handles None input correctly.","code":"assertIsNone(my_function(None))"}
{"query":"Test a function's output when given an empty list as input.","code":"assertEqual(my_function([]), [])"}
{"query":"Create a unit test that validates the return type of a function.","code":"assertIsInstance(my_function(1), int)"}
{"query":"Develop a test to ensure that a function returns a specific string value.","code":"assertEqual(greet(\"World\"), \"Hello, World!\")"}
{"query":"Write a test to verify if a function correctly modifies a mutable object.","code":"original_list = [1, 2, 3]\nmy_function(original_list)\nassertEqual(original_list, [1, 2, 3, 4])"}
{"query":"Test a function that performs calculations to check for a specific result.","code":"assertEqual(multiply(5, 5), 25)"}
{"query":"Create a test for a function that handles different data types as input.","code":"assertEqual(concatenate(\"hello\", \"world\"), \"helloworld\")"}
{"query":"Develop a unit test to check if a function returns a default value if input is invalid.","code":"assertEqual(get_value(None), \"default\")"}
{"query":"Implement a unit test for a function that uses conditional logic.","code":"assertEqual(compare(5, 3), \"greater\")"}
{"query":"Write a unit test to check that a function returns False when a condition is not met.","code":"assertFalse(is_even(3))"}
{"query":"Test a function that calls other functions to verify the calls.","code":"mock_function = MagicMock()\nmy_function(mock_function)\nmock_function.assert_called_once()"}
{"query":"Write a unit test to check if a function returns the correct sum of two numbers.","code":"assert add(2, 3) == 5"}
{"query":"Test a function that checks if a number is even.","code":"assert is_even(4) == True"}
{"query":"Create a unit test to verify a function that converts Celsius to Fahrenheit.","code":"assert celsius_to_fahrenheit(0) == 32"}
{"query":"Test a function to ensure it handles division by zero correctly.","code":"with pytest.raises(ZeroDivisionError):\n    divide(1, 0)"}
{"query":"Write a unit test for a function that checks if a string is a palindrome.","code":"assert is_palindrome(\"madam\") == True"}
{"query":"Test a function that removes duplicate elements from a list.","code":"assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]"}
{"query":"Create a unit test for a function that calculates the factorial of a number.","code":"assert factorial(5) == 120"}
{"query":"Test a function that validates an email address format.","code":"assert validate_email(\"test@example.com\") == True"}
{"query":"Write a unit test to check if a file exists.","code":"assert os.path.exists(\"my_file.txt\") == True"}
{"query":"Test a function that converts a string to uppercase.","code":"assert to_uppercase(\"hello\") == \"HELLO\""}
{"query":"Create a unit test for a function that reverses a string.","code":"assert reverse_string(\"abc\") == \"cba\""}
{"query":"Test a function that filters even numbers from a list.","code":"assert filter_even([1, 2, 3, 4]) == [2, 4]"}
{"query":"Write a unit test for a function that calculates the area of a rectangle.","code":"assert rectangle_area(5, 10) == 50"}
{"query":"Test a function that checks if a given key exists in a dictionary.","code":"assert key_exists({\"a\": 1, \"b\": 2}, \"a\") == True"}
{"query":"Create a unit test for a function that concatenates two strings.","code":"assert concatenate_strings(\"hello\", \"world\") == \"helloworld\""}
{"query":"Test a function that raises an exception when an invalid input is provided.","code":"with pytest.raises(ValueError):\n    process_data(\"invalid_input\")"}
{"query":"Write a unit test to check if a function returns the correct sum of two numbers.","code":"assert add(2, 3) == 5"}
{"query":"Create a test to verify if a function raises a ValueError for invalid input.","code":"with pytest.raises(ValueError): function_to_test('invalid')"}
{"query":"Implement a test to check if a list contains a specific element after an append operation.","code":"my_list = []; my_list.append(5); assert 5 in my_list"}
{"query":"Develop a unit test for a function that calculates the factorial of a number.","code":"assert factorial(5) == 120"}
{"query":"Test a function to confirm it returns None when an empty list is given.","code":"assert process_list([]) is None"}
{"query":"Write a test to ensure a function correctly handles division by zero.","code":"with pytest.raises(ZeroDivisionError): 1 / 0"}
{"query":"Create a unit test for a function that removes duplicates from a list.","code":"assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]"}
{"query":"Test a function that converts Celsius to Fahrenheit for a specific input.","code":"assert c_to_f(0) == 32"}
{"query":"Implement a unit test for a function that checks if a string is a palindrome.","code":"assert is_palindrome(\"madam\") == True"}
{"query":"Develop a unit test for a function that calculates the area of a rectangle.","code":"assert rectangle_area(5, 4) == 20"}
{"query":"Create a test to check the behavior of a function when dealing with None input.","code":"assert my_function(None) == 'default_value'"}
{"query":"Write a unit test to verify the correct output of a function that reverses a string.","code":"assert reverse_string(\"hello\") == \"olleh\""}
{"query":"Test a function designed to check if a number is even.","code":"assert is_even(4) == True"}
{"query":"Implement a test for a function that finds the maximum value in a list.","code":"assert find_max([1, 5, 2]) == 5"}
{"query":"Develop a test for a function that trims whitespace from the beginning and end of a string.","code":"assert trim_whitespace(\"  hello  \") == \"hello\""}
{"query":"Create a unit test for a function that converts a string to lowercase.","code":"assert to_lowercase(\"HeLlO\") == \"hello\""}
{"query":"This code asserts that two values are equal.","code":"assert 1 == 1"}
{"query":"The code verifies that a function returns None.","code":"assert my_function() is None"}
{"query":"This code checks if a condition is true using an assertion.","code":"assert True"}
{"query":"This code verifies that a specific exception is raised.","code":"with pytest.raises(ValueError): raise ValueError(\"Invalid value\")"}
{"query":"The code checks if a list contains a specific element.","code":"assert 'a' in ['a', 'b', 'c']"}
{"query":"This code tests if a function returns a specific value.","code":"assert my_function(5) == 10"}
{"query":"This code asserts that two dictionaries are equal.","code":"assert {'a': 1} == {'a': 1}"}
{"query":"The code tests if a file exists.","code":"assert os.path.exists('my_file.txt')"}
{"query":"This code asserts that a function returns False.","code":"assert not my_function()"}
{"query":"This code checks the length of a string.","code":"assert len(\"hello\") == 5"}
{"query":"This code verifies that two floating-point numbers are approximately equal.","code":"assert math.isclose(3.14, 3.14159, rel_tol=0.01)"}
{"query":"This code tests the behavior of a method with a mock object.","code":"mock_object.my_method.return_value = True; assert mock_object.my_method() is True"}
{"query":"This code asserts that a specific value is not null.","code":"assert my_variable is not None"}
{"query":"The code checks if a list is empty.","code":"assert not my_list"}
{"query":"This code verifies that a function raises an exception with a specific message.","code":"with pytest.raises(TypeError, match=\"Invalid type\"): my_function()"}
{"query":"The code tests if two strings are equal after removing whitespace.","code":"assert 'hello world'.strip() == 'hello world'.strip()"}
{"query":"Test if a function returns the correct sum of two numbers.","code":"assert add(2, 3) == 5"}
{"query":"Verify that a function returns True when a list is not empty.","code":"assert is_not_empty([1, 2, 3]) == True"}
{"query":"Check if a function correctly calculates the factorial of a number.","code":"assert factorial(5) == 120"}
{"query":"Test a function that raises an exception for invalid input.","code":"try: raise_exception(-1) except ValueError: pass"}
{"query":"Ensure a function returns the expected string output.","code":"assert greet('World') == 'Hello, World!'"}
{"query":"Check if a function updates a dictionary correctly.","code":"d = {}; update_dict(d, 'key', 'value'); assert d == {'key': 'value'}"}
{"query":"Verify that a function returns None when the input is zero.","code":"assert process(0) is None"}
{"query":"Test if a function correctly converts Celsius to Fahrenheit.","code":"assert to_fahrenheit(0) == 32"}
{"query":"Assert that a function returns the correct length of a string.","code":"assert string_length('test') == 4"}
{"query":"Test a function that removes duplicates from a list.","code":"assert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]"}
{"query":"Verify that a function correctly sorts a list of numbers.","code":"assert sort_numbers([3, 1, 2]) == [1, 2, 3]"}
{"query":"Check if a function returns the maximum value from a list.","code":"assert find_max([1, 5, 2]) == 5"}
{"query":"Test a function that checks if a number is even.","code":"assert is_even(2) == True"}
{"query":"Ensure that a function correctly calculates the area of a rectangle.","code":"assert calculate_area(5, 10) == 50"}
{"query":"Check if a function correctly converts a string to uppercase.","code":"assert to_uppercase('hello') == 'HELLO'"}
{"query":"Verify that a function returns True if a string contains a substring.","code":"assert contains_substring('hello world', 'world') == True"}
{"query":"This unit test checks if two numbers are correctly added together.","code":"assert 2 + 2 == 4"}
{"query":"The test verifies that a function returns the correct string output.","code":"assert my_function() == \"expected_output\""}
{"query":"This unit test checks if a list contains a specific element.","code":"assert 5 in [1, 2, 3, 4, 5]"}
{"query":"This test checks if a function raises an exception when given invalid input.","code":"import pytest\nwith pytest.raises(ValueError):\n    my_function(-1)"}
{"query":"This unit test tests the functionality of a class's method.","code":"class MyClass:\n    def my_method(self, x):\n        return x * 2\nobj = MyClass()\nassert obj.my_method(3) == 6"}
{"query":"This test checks if a dictionary has a specific key-value pair.","code":"my_dict = {'a': 1, 'b': 2}\nassert my_dict['b'] == 2"}
{"query":"This test verifies that a file is created.","code":"import os\nopen('test_file.txt', 'w').close()\nassert os.path.exists('test_file.txt')"}
{"query":"This test checks if two lists are equal.","code":"list1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nassert list1 == list2"}
{"query":"This test asserts that a variable is None.","code":"my_var = None\nassert my_var is None"}
{"query":"The test validates that a function returns a boolean True value.","code":"assert my_function(True)"}
{"query":"This unit test checks a function's return value with multiple inputs.","code":"assert my_function(1, 2) == 3 and my_function(2, 2) == 4"}
{"query":"This test validates the behavior of a mocked function.","code":"from unittest.mock import patch\n@patch('module.my_function')\ndef test_my_function(mock_function):\n    mock_function.return_value = 'mocked_output'\n    assert my_function() == 'mocked_output'"}
{"query":"This test checks the length of a string.","code":"my_string = \"hello\"\nassert len(my_string) == 5"}
{"query":"This unit test asserts that a file is deleted successfully.","code":"import os\nopen('temp.txt', 'w').close()\nos.remove('temp.txt')\nassert not os.path.exists('temp.txt')"}
{"query":"This unit test confirms that a specific object is an instance of a particular class.","code":"class MyClass:\n    pass\nobj = MyClass()\nassert isinstance(obj, MyClass)"}
{"query":"This test checks that a function's output matches the expected float value.","code":"assert abs(my_function() - 3.14) < 0.01"}
{"query":"Calculate the mean of a list of numbers.","code":"mean([1, 2, 3, 4, 5])"}
{"query":"Find the median of a list of numbers.","code":"median([1, 2, 3, 4, 5])"}
{"query":"Determine the standard deviation of a dataset.","code":"stdev([1, 2, 3, 4, 5])"}
{"query":"Count the occurrences of each unique value in a list.","code":"Counter([1, 2, 2, 3, 3, 3])"}
{"query":"Filter a list to include only even numbers.","code":"[x for x in [1, 2, 3, 4, 5] if x % 2 == 0]"}
{"query":"Calculate the sum of squares for a list of numbers.","code":"sum([x**2 for x in [1, 2, 3]])"}
{"query":"Group a list of dictionaries by a specific key.","code":"groupby([{'a': 1, 'b': 2}, {'a': 2, 'b': 3}], key=lambda x: x['a'])"}
{"query":"Sort a list of tuples based on the second element.","code":"sorted([(1, 3), (2, 1), (3, 2)], key=lambda x: x[1])"}
{"query":"Create a dictionary from two lists, one for keys and one for values.","code":"dict(zip(['a', 'b', 'c'], [1, 2, 3]))"}
{"query":"Calculate the moving average of a time series data.","code":"rolling(Series([1, 2, 3, 4, 5]), window=2).mean()"}
{"query":"Reshape a 1D array into a 2D array with specified dimensions.","code":"reshape([1, 2, 3, 4, 5, 6], (2, 3))"}
{"query":"Perform a linear regression on two arrays of data.","code":"linregress([1, 2, 3], [4, 5, 6])"}
{"query":"Calculate the correlation coefficient between two datasets.","code":"corrcoef([1, 2, 3, 4, 5], [2, 4, 5, 4, 5])"}
{"query":"Perform principal component analysis (PCA) to reduce dimensionality.","code":"PCA(n_components=2).fit_transform([[1,2], [3,4], [5,6]])"}
{"query":"Impute missing values in a dataset using the mean.","code":"SimpleImputer(strategy='mean').fit_transform([[1,2,np.nan], [3,4,5]])"}
{"query":"Visualize the distribution of data using a histogram.","code":"hist([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"}
{"query":"Calculate the sum of a list of numbers using a loop.","code":"numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = 0\nfor number in numbers:\n    sum_of_numbers += number"}
{"query":"Find the average of a list of numbers.","code":"numbers = [10, 20, 30, 40, 50]\naverage = sum(numbers) / len(numbers)"}
{"query":"Determine the maximum value in a list.","code":"numbers = [15, 8, 25, 12, 18]\nmaximum = max(numbers)"}
{"query":"Identify the minimum value in a list.","code":"numbers = [15, 8, 25, 12, 18]\nminimum = min(numbers)"}
{"query":"Count the occurrences of each unique element in a list using a dictionary.","code":"items = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = {}\nfor item in items:\n    counts[item] = counts.get(item, 0) + 1"}
{"query":"Filter a list to include only even numbers.","code":"numbers = [1, 2, 3, 4, 5, 6]\neven_numbers = [number for number in numbers if number % 2 == 0]"}
{"query":"Calculate the median of a list of numbers.","code":"numbers = [5, 2, 8, 1, 9]\nsorted_numbers = sorted(numbers)\nlength = len(sorted_numbers)\nif length % 2 == 0:\n    median = (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2\nelse:\n    median = sorted_numbers[length // 2]"}
{"query":"Create a simple histogram using matplotlib.","code":"import matplotlib.pyplot as plt\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nplt.hist(numbers)\nplt.show()"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics\nnumbers = [1, 2, 3, 4, 5]\nstandard_deviation = statistics.stdev(numbers)"}
{"query":"Remove duplicate elements from a list.","code":"numbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = list(set(numbers))"}
{"query":"Sort a list of numbers in ascending order.","code":"numbers = [5, 2, 8, 1, 9]\nsorted_numbers = sorted(numbers)"}
{"query":"Sort a list of strings alphabetically.","code":"words = ['banana', 'apple', 'orange', 'grape']\nsorted_words = sorted(words)"}
{"query":"Calculate the correlation between two lists using numpy.","code":"import numpy as np\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 5, 4, 5]\ncorrelation = np.corrcoef(list1, list2)[0, 1]"}
{"query":"Group data by a specific column and calculate the mean using pandas.","code":"import pandas as pd\ndata = {'Category': ['A', 'A', 'B', 'B'], 'Value': [10, 20, 30, 40]}\ndf = pd.DataFrame(data)\ngrouped = df.groupby('Category')['Value'].mean()"}
{"query":"Create a scatter plot using matplotlib.","code":"import matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 1, 3, 5]\nplt.scatter(x, y)\nplt.show()"}
{"query":"Perform linear regression using scikit-learn.","code":"from sklearn.linear_model import LinearRegression\nx = [[1], [2], [3], [4], [5]]\ny = [2, 4, 5, 4, 5]\nmodel = LinearRegression()\nmodel.fit(x, y)\nprediction = model.predict([[6]])"}
{"query":"Calculate the mean of a list of numbers.","code":"mean([1, 2, 3, 4, 5])"}
{"query":"Find the median of a list of numbers.","code":"median([1, 2, 3, 4, 5])"}
{"query":"Determine the standard deviation of a given dataset.","code":"stdev([1, 2, 3, 4, 5])"}
{"query":"Compute the variance of a given dataset.","code":"variance([1, 2, 3, 4, 5])"}
{"query":"Count the occurrences of each unique value in a list.","code":"value_counts(['a', 'b', 'a', 'c', 'b'])"}
{"query":"Filter a list to include only even numbers.","code":"even_numbers = [x for x in [1, 2, 3, 4, 5, 6] if x % 2 == 0]"}
{"query":"Sort a list of numbers in ascending order.","code":"sorted([3, 1, 4, 1, 5, 9, 2, 6])"}
{"query":"Calculate the sum of a list of numbers.","code":"sum([1, 2, 3, 4, 5])"}
{"query":"Find the maximum value in a list.","code":"max([1, 2, 3, 4, 5])"}
{"query":"Find the minimum value in a list.","code":"min([1, 2, 3, 4, 5])"}
{"query":"Create a dictionary from two lists, using one as keys and the other as values.","code":"dict(zip(['a', 'b', 'c'], [1, 2, 3]))"}
{"query":"Calculate the correlation between two lists of numbers.","code":"correlation([1, 2, 3, 4, 5], [2, 4, 5, 4, 5])"}
{"query":"Group a list of dictionaries by a specific key.","code":"groupby(data, 'key')"}
{"query":"Calculate the moving average of a list of numbers.","code":"moving_average(data, window=3)"}
{"query":"Remove duplicate elements from a list.","code":"unique_elements = list(set([1, 2, 2, 3, 4, 4, 5]))"}
{"query":"Perform a linear regression on two sets of data.","code":"linear_regression(x_values, y_values)"}
{"query":"Calculate the mean of a list of numbers.","code":"mean([1, 2, 3, 4, 5])"}
{"query":"Find the median of a list of numbers.","code":"median([1, 2, 3, 4, 5])"}
{"query":"Determine the standard deviation of a dataset.","code":"stdev([1, 2, 3, 4, 5])"}
{"query":"Calculate the correlation between two lists of numbers.","code":"corrcoef([1, 2, 3], [4, 5, 6])[0][1]"}
{"query":"Group data by a specific column and calculate the sum for each group.","code":"df.groupby('category')['value'].sum()"}
{"query":"Filter a DataFrame to include rows where a column's value meets a condition.","code":"df[df['column'] > 10]"}
{"query":"Create a scatter plot to visualize the relationship between two variables.","code":"plt.scatter(x, y)"}
{"query":"Create a histogram to visualize the distribution of a dataset.","code":"plt.hist(data)"}
{"query":"Calculate the moving average of a time series data.","code":"df['value'].rolling(window=3).mean()"}
{"query":"Calculate the percentage change between consecutive values in a series.","code":"df['value'].pct_change()"}
{"query":"Resample time series data to a different frequency.","code":"df.resample('M').mean()"}
{"query":"Impute missing values in a dataset using the mean.","code":"df['column'].fillna(df['column'].mean())"}
{"query":"Merge two dataframes based on a common column.","code":"pd.merge(df1, df2, on='common_column')"}
{"query":"Pivot a DataFrame to reshape the data.","code":"df.pivot(index='index_col', columns='col_name', values='value_col')"}
{"query":"Apply a function to each element of a column in a DataFrame.","code":"df['column'].apply(lambda x: x * 2)"}
{"query":"Calculate the cumulative sum of a column in a DataFrame.","code":"df['column'].cumsum()"}
{"query":"Calculate the sum of a list of numbers.","code":"numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = sum(numbers)"}
{"query":"Find the average of a list of numbers.","code":"numbers = [10, 20, 30, 40, 50]\naverage = sum(numbers) / len(numbers)"}
{"query":"Determine the maximum value in a list.","code":"data = [25, 10, 35, 15, 40]\nmaximum = max(data)"}
{"query":"Find the minimum value in a list.","code":"data = [25, 10, 35, 15, 40]\nminimum = min(data)"}
{"query":"Count the occurrences of a specific value in a list.","code":"items = ['apple', 'banana', 'apple', 'orange', 'apple']\ncount = items.count('apple')"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics\ndata = [1, 2, 3, 4, 5]\nstd_dev = statistics.stdev(data)"}
{"query":"Sort a list of numbers in ascending order.","code":"numbers = [5, 2, 8, 1, 9]\nsorted_numbers = sorted(numbers)"}
{"query":"Sort a list of strings alphabetically.","code":"fruits = ['banana', 'apple', 'orange']\nsorted_fruits = sorted(fruits)"}
{"query":"Filter a list to include only even numbers.","code":"numbers = [1, 2, 3, 4, 5, 6]\neven_numbers = [num for num in numbers if num % 2 == 0]"}
{"query":"Create a dictionary to count word frequencies in a string.","code":"text = \"this is a test this is\"\nwords = text.split()\nword_counts = {word: words.count(word) for word in set(words)}"}
{"query":"Group data by a specific key using a dictionary.","code":"data = [{'category': 'A', 'value': 10}, {'category': 'B', 'value': 20}, {'category': 'A', 'value': 30}]\ngrouped_data = {}\nfor item in data:\n  category = item['category']\n  if category not in grouped_data:\n    grouped_data[category] = []\n  grouped_data[category].append(item['value'])"}
{"query":"Calculate the correlation between two lists of numbers.","code":"import numpy\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 4, 5]\ncorrelation = numpy.corrcoef(x, y)[0, 1]"}
{"query":"Remove duplicate elements from a list.","code":"numbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = list(set(numbers))"}
{"query":"Calculate the moving average of a list of data.","code":"def moving_average(data, window):\n  return numpy.convolve(data, numpy.ones(window), 'valid') / window\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nwindow_size = 3\nmoving_avg = moving_average(data, window_size)"}
{"query":"Calculate the median of a list of numbers.","code":"import statistics\ndata = [1, 2, 3, 4, 5]\nmedian = statistics.median(data)"}
{"query":"Transpose a matrix represented as a list of lists.","code":"matrix = [[1, 2, 3], [4, 5, 6]]\ntransposed_matrix = [[row[i] for row in matrix] for i in range(len(matrix[0]))]"}
{"query":"Calculate the mean of a list of numbers.","code":"numbers = [1, 2, 3, 4, 5]\nmean_value = sum(numbers) / len(numbers)"}
{"query":"Find the maximum value in a list of numbers.","code":"numbers = [10, 5, 20, 15]\nmax_value = max(numbers)"}
{"query":"Determine the minimum value in a list of numbers.","code":"numbers = [10, 5, 20, 15]\nmin_value = min(numbers)"}
{"query":"Calculate the sum of a list of numbers.","code":"numbers = [1, 2, 3, 4, 5]\nsum_value = sum(numbers)"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics\nnumbers = [1, 2, 3, 4, 5]\nstd_dev = statistics.stdev(numbers)"}
{"query":"Count the occurrences of each unique element in a list.","code":"from collections import Counter\nmy_list = ['a', 'b', 'a', 'c', 'b', 'b']\ncounts = Counter(my_list)"}
{"query":"Filter a list to include only even numbers.","code":"numbers = [1, 2, 3, 4, 5, 6]\neven_numbers = [num for num in numbers if num % 2 == 0]"}
{"query":"Create a dictionary from two lists, using one as keys and the other as values.","code":"keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\ndict_from_lists = dict(zip(keys, values))"}
{"query":"Sort a list of numbers in ascending order.","code":"numbers = [3, 1, 4, 1, 5, 9, 2, 6]\nsorted_numbers = sorted(numbers)"}
{"query":"Calculate the median of a list of numbers.","code":"import statistics\nnumbers = [1, 2, 3, 4, 5]\nmedian_value = statistics.median(numbers)"}
{"query":"Group a list of numbers into bins using numpy.","code":"import numpy as np\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nbins = np.linspace(0, 10, 6)\ngrouped_numbers = np.digitize(numbers, bins)"}
{"query":"Perform linear regression using the statsmodels library.","code":"import statsmodels.api as sm\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 4, 5]\nX = sm.add_constant(X)\nmodel = sm.OLS(y, X).fit()"}
{"query":"Calculate the correlation coefficient between two lists.","code":"import numpy as np\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\ncorrelation = np.corrcoef(x, y)[0, 1]"}
{"query":"Calculate the moving average of a list of numbers.","code":"import numpy as np\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nwindow_size = 3\nmoving_average = np.convolve(numbers, np.ones(window_size), 'valid') / window_size"}
{"query":"Reshape a NumPy array.","code":"import numpy as np\narr = np.array([[1, 2], [3, 4], [5, 6]])\nreshaped_arr = arr.reshape(2, 3)"}
{"query":"Calculate the percentiles of a list of numbers using numpy.","code":"import numpy as np\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npercentiles = np.percentile(numbers, [25, 50, 75])"}
{"query":"Write \"Hello, world!\" to a file named \"output.txt\".","code":"f = open(\"output.txt\", \"w\")\nf.write(\"Hello, world!\")\nf.close()"}
{"query":"Read the contents of \"input.txt\" and print it to the console.","code":"f = open(\"input.txt\", \"r\")\nprint(f.read())\nf.close()"}
{"query":"Append the text \"This is a new line.\" to \"example.txt\".","code":"f = open(\"example.txt\", \"a\")\nf.write(\"This is a new line.\")\nf.close()"}
{"query":"Check if a file named \"data.csv\" exists.","code":"import os\nprint(os.path.exists(\"data.csv\"))"}
{"query":"Create a new file named \"my_file.txt\" if it doesn't exist.","code":"f = open(\"my_file.txt\", \"w\")\nf.close()"}
{"query":"Delete the file \"temp.dat\".","code":"import os\nos.remove(\"temp.dat\")"}
{"query":"Rename \"old_name.txt\" to \"new_name.txt\".","code":"import os\nos.rename(\"old_name.txt\", \"new_name.txt\")"}
{"query":"Get the size of the file \"report.pdf\" in bytes.","code":"import os\nprint(os.path.getsize(\"report.pdf\"))"}
{"query":"Copy the contents of \"source.txt\" to \"destination.txt\".","code":"with open(\"source.txt\", \"r\") as infile:\n    with open(\"destination.txt\", \"w\") as outfile:\n        outfile.write(infile.read())"}
{"query":"Iterate through \"log.txt\" line by line and print each line.","code":"with open(\"log.txt\", \"r\") as f:\n    for line in f:\n        print(line.strip())"}
{"query":"Read the first 10 bytes from \"binary.dat\".","code":"with open(\"binary.dat\", \"rb\") as f:\n    print(f.read(10))"}
{"query":"Write a list of strings to a file named \"list_output.txt\", each on a new line.","code":"lines = [\"line1\", \"line2\", \"line3\"]\nwith open(\"list_output.txt\", \"w\") as f:\n    for line in lines:\n        f.write(line + \"\\n\")"}
{"query":"Open \"config.ini\" and read a specific section.","code":"import configparser\nconfig = configparser.ConfigParser()\nconfig.read(\"config.ini\")\nif 'Section1' in config:\n    print(config['Section1']['option1'])"}
{"query":"Search for a specific word in \"document.txt\" and print the line number if found.","code":"word_to_find = \"search_term\"\nwith open(\"document.txt\", \"r\") as f:\n    for i, line in enumerate(f):\n        if word_to_find in line:\n            print(f\"Found at line: {i+1}\")"}
{"query":"Write a dictionary to a JSON file named \"data.json\".","code":"import json\ndata = {\"name\": \"example\", \"value\": 123}\nwith open(\"data.json\", \"w\") as f:\n    json.dump(data, f, indent=4)"}
{"query":"Load a JSON file named \"data.json\" and print the content to console.","code":"import json\nwith open(\"data.json\", \"r\") as f:\n    data = json.load(f)\n    print(data)"}
{"query":"This Python code opens a file named 'example.txt' in read mode and prints its content.","code":"file = open('example.txt', 'r')\nprint(file.read())\nfile.close()"}
{"query":"The code creates a new file named 'output.txt' and writes the string 'Hello, world!' into it.","code":"file = open('output.txt', 'w')\nfile.write('Hello, world!')\nfile.close()"}
{"query":"This code appends the string ' Appended text' to the file 'example.txt'.","code":"file = open('example.txt', 'a')\nfile.write(' Appended text')\nfile.close()"}
{"query":"This Python code reads the first line of the file 'example.txt' and prints it.","code":"file = open('example.txt', 'r')\nprint(file.readline())\nfile.close()"}
{"query":"The following code iterates through the lines of 'example.txt' and prints each one.","code":"file = open('example.txt', 'r')\nfor line in file:\n  print(line)\nfile.close()"}
{"query":"The code reads the content of 'example.txt' into a list of strings.","code":"file = open('example.txt', 'r')\nlines = file.readlines()\nprint(lines)\nfile.close()"}
{"query":"This code checks if the file 'example.txt' exists and prints a corresponding message.","code":"import os\nif os.path.exists('example.txt'):\n  print('File exists')\nelse:\n  print('File does not exist')"}
{"query":"This code renames 'old_name.txt' to 'new_name.txt'.","code":"import os\nos.rename('old_name.txt', 'new_name.txt')"}
{"query":"This code deletes the file 'example.txt'.","code":"import os\nos.remove('example.txt')"}
{"query":"This code gets the current working directory and prints it.","code":"import os\nprint(os.getcwd())"}
{"query":"This Python code creates a directory named 'new_directory'.","code":"import os\nos.mkdir('new_directory')"}
{"query":"The following code checks if 'new_directory' is a directory and prints the result.","code":"import os\nif os.path.isdir('new_directory'):\n  print('Is a directory')\nelse:\n  print('Is not a directory')"}
{"query":"The code lists all files and directories in the current directory.","code":"import os\nprint(os.listdir('.'))"}
{"query":"This Python code copies the content from 'source.txt' to 'destination.txt'.","code":"with open('source.txt', 'r') as source_file, open('destination.txt', 'w') as destination_file:\n    for line in source_file:\n        destination_file.write(line)"}
{"query":"The code calculates the size of 'example.txt' in bytes.","code":"import os\nsize = os.path.getsize('example.txt')\nprint(size)"}
{"query":"This Python code splits a file path into its directory and filename.","code":"import os\npath = '/path/to/my/file.txt'\ndir_name, file_name = os.path.split(path)\nprint(dir_name)\nprint(file_name)"}
{"query":"Open a file named 'example.txt' in read mode and print the first line.","code":"file = open('example.txt', 'r')\nprint(file.readline())\nfile.close()"}
{"query":"Write the string 'Hello, world!' to a file called 'output.txt'.","code":"file = open('output.txt', 'w')\nfile.write('Hello, world!')\nfile.close()"}
{"query":"Append the string 'Appending text' to the file 'log.txt'.","code":"file = open('log.txt', 'a')\nfile.write('Appending text')\nfile.close()"}
{"query":"Read all lines from 'data.csv' and print each line.","code":"file = open('data.csv', 'r')\nfor line in file:\n print(line.strip())\nfile.close()"}
{"query":"Check if the file 'my_file.txt' exists.","code":"import os\nif os.path.exists('my_file.txt'):\n print('File exists')\nelse:\n print('File does not exist')"}
{"query":"Create a new file named 'new_file.txt'.","code":"file = open('new_file.txt', 'w')\nfile.close()"}
{"query":"Delete the file named 'old_file.txt'.","code":"import os\nos.remove('old_file.txt')"}
{"query":"Rename the file 'original.txt' to 'renamed.txt'.","code":"import os\nos.rename('original.txt', 'renamed.txt')"}
{"query":"Read the entire content of 'config.ini' into a string.","code":"file = open('config.ini', 'r')\ncontent = file.read()\nprint(content)\nfile.close()"}
{"query":"Write a list of strings to 'list.txt', each on a new line.","code":"lines = ['line1', 'line2', 'line3']\nfile = open('list.txt', 'w')\nfor line in lines:\n file.write(line + '\\n')\nfile.close()"}
{"query":"Copy the content of 'source.dat' to 'destination.dat'.","code":"with open('source.dat', 'r') as source, open('destination.dat', 'w') as destination:\n for line in source:\n destination.write(line)"}
{"query":"Get the size of the file 'document.pdf' in bytes.","code":"import os\nsize = os.path.getsize('document.pdf')\nprint(size)"}
{"query":"Read the last 10 characters from 'sample.txt'.","code":"file = open('sample.txt', 'r')\nfile.seek(-10, 2)\nprint(file.read())\nfile.close()"}
{"query":"Count the number of lines in the file 'input.log'.","code":"count = 0\nwith open('input.log', 'r') as file:\n for line in file:\n count += 1\nprint(count)"}
{"query":"Create a directory named 'backup'.","code":"import os\nos.mkdir('backup')"}
{"query":"Check if a given path is a directory.","code":"import os\nif os.path.isdir('my_directory'):\n print('Is a directory')\nelse:\n print('Is not a directory')"}
{"query":"This code opens and reads the content of a text file named 'example.txt'.","code":"file = open('example.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()"}
{"query":"This code writes 'Hello, world!' to a file named 'output.txt'.","code":"file = open('output.txt', 'w')\nfile.write('Hello, world!')\nfile.close()"}
{"query":"This code appends the string ' Appended text' to a file named 'example.txt'.","code":"file = open('example.txt', 'a')\nfile.write(' Appended text')\nfile.close()"}
{"query":"This code checks if a file named 'my_file.txt' exists.","code":"import os\nif os.path.exists('my_file.txt'):\n    print('File exists')\nelse:\n    print('File does not exist')"}
{"query":"This code creates a new file named 'new_file.txt' if it does not exist.","code":"file = open('new_file.txt', 'w')\nfile.close()"}
{"query":"This code deletes the file 'to_delete.txt'.","code":"import os\nos.remove('to_delete.txt')"}
{"query":"This code reads the first line from the file 'data.txt'.","code":"file = open('data.txt', 'r')\nfirst_line = file.readline()\nprint(first_line)\nfile.close()"}
{"query":"This code reads all lines from 'input.txt' into a list.","code":"file = open('input.txt', 'r')\nlines = file.readlines()\nprint(lines)\nfile.close()"}
{"query":"This code iterates through each line of 'example.txt' and prints it.","code":"file = open('example.txt', 'r')\nfor line in file:\n    print(line.strip())\nfile.close()"}
{"query":"This code renames the file 'old_name.txt' to 'new_name.txt'.","code":"import os\nos.rename('old_name.txt', 'new_name.txt')"}
{"query":"This code gets the file size of 'file.txt' in bytes.","code":"import os\nfile_size = os.path.getsize('file.txt')\nprint(file_size)"}
{"query":"This code copies the content from 'source.txt' to 'destination.txt'.","code":"with open('source.txt', 'r') as src, open('destination.txt', 'w') as dest:\n    for line in src:\n        dest.write(line)"}
{"query":"This code closes the file 'my_file.txt' after writing content to it.","code":"file = open('my_file.txt', 'w')\nfile.write('Some content')\nfile.close()"}
{"query":"This code uses a context manager to open and write to 'context_file.txt'.","code":"with open('context_file.txt', 'w') as file:\n    file.write('Content written using context manager')"}
{"query":"This code reads the file 'numbers.txt' and converts each line to an integer, then prints the sum.","code":"total = 0\nwith open('numbers.txt', 'r') as file:\n    for line in file:\n        total += int(line.strip())\nprint(total)"}
{"query":"This code writes a list of strings, each on a new line, to a file named 'list_file.txt'.","code":"lines = ['line 1', 'line 2', 'line 3']\nwith open('list_file.txt', 'w') as file:\n    file.writelines(line + '\\n' for line in lines)"}
{"query":"Open a file named 'example.txt' in read mode and print its content.","code":"file = open('example.txt', 'r')\nprint(file.read())\nfile.close()"}
{"query":"Write the string 'Hello, world!' to a file named 'output.txt'.","code":"file = open('output.txt', 'w')\nfile.write('Hello, world!')\nfile.close()"}
{"query":"Append the string 'Appended text' to the file 'example.txt'.","code":"file = open('example.txt', 'a')\nfile.write('Appended text')\nfile.close()"}
{"query":"Create a file named 'new_file.txt' and write a list of numbers to it, each on a new line.","code":"file = open('new_file.txt', 'w')\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    file.write(str(number) + '\\n')\nfile.close()"}
{"query":"Read the first 10 bytes from 'example.txt'.","code":"file = open('example.txt', 'r')\ncontent = file.read(10)\nprint(content)\nfile.close()"}
{"query":"Read the file 'example.txt' line by line and print each line.","code":"file = open('example.txt', 'r')\nfor line in file:\n    print(line.strip())\nfile.close()"}
{"query":"Check if the file 'example.txt' exists.","code":"import os\nif os.path.exists('example.txt'):\n    print('File exists')\nelse:\n    print('File does not exist')"}
{"query":"Rename the file 'old_name.txt' to 'new_name.txt'.","code":"import os\nos.rename('old_name.txt', 'new_name.txt')"}
{"query":"Delete the file 'file_to_delete.txt'.","code":"import os\nos.remove('file_to_delete.txt')"}
{"query":"Create a directory named 'my_directory'.","code":"import os\nos.mkdir('my_directory')"}
{"query":"Remove the directory 'my_directory'.","code":"import os\nos.rmdir('my_directory')"}
{"query":"Get the current working directory.","code":"import os\nprint(os.getcwd())"}
{"query":"Change the current working directory to 'my_directory'.","code":"import os\nos.chdir('my_directory')"}
{"query":"Write a list of strings to a file, each string on a new line.","code":"lines = ['line1', 'line2', 'line3']\nwith open('strings.txt', 'w') as f:\n    for line in lines:\n        f.write(line + '\\n')"}
{"query":"Copy the content of 'source.txt' to 'destination.txt'.","code":"with open('source.txt', 'r') as src, open('destination.txt', 'w') as dest:\n    dest.write(src.read())"}
{"query":"Iterate through the contents of a CSV file and print the data.","code":"import csv\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)"}
{"query":"Open a file named 'example.txt' in read mode and print its content.","code":"file = open('example.txt', 'r')\nprint(file.read())\nfile.close()"}
{"query":"Write the string 'Hello, world!' to a file named 'output.txt'.","code":"file = open('output.txt', 'w')\nfile.write('Hello, world!')\nfile.close()"}
{"query":"Append the string 'This is a new line.' to the file 'output.txt'.","code":"file = open('output.txt', 'a')\nfile.write('This is a new line.')\nfile.close()"}
{"query":"Read the first 10 bytes from a file named 'data.bin'.","code":"file = open('data.bin', 'rb')\ncontent = file.read(10)\nprint(content)\nfile.close()"}
{"query":"Iterate through the lines of a file called 'input.txt' and print each line.","code":"with open('input.txt', 'r') as file:\n    for line in file:\n        print(line.strip())"}
{"query":"Check if a file named 'my_file.txt' exists and print an appropriate message.","code":"import os\nif os.path.exists('my_file.txt'):\n    print('File exists')\nelse:\n    print('File does not exist')"}
{"query":"Rename the file 'old_name.txt' to 'new_name.txt'.","code":"import os\nos.rename('old_name.txt', 'new_name.txt')"}
{"query":"Delete the file 'temp.dat'.","code":"import os\nos.remove('temp.dat')"}
{"query":"Create a directory named 'my_directory'.","code":"import os\nos.mkdir('my_directory')"}
{"query":"Remove an empty directory named 'empty_dir'.","code":"import os\nos.rmdir('empty_dir')"}
{"query":"Get the current working directory.","code":"import os\nprint(os.getcwd())"}
{"query":"Change the current working directory to 'new_directory'.","code":"import os\nos.chdir('new_directory')"}
{"query":"Write a list of strings to a file, each on a new line.","code":"lines = ['line1', 'line2', 'line3']\nwith open('list_output.txt', 'w') as file:\n    for line in lines:\n        file.write(line + '\\n')"}
{"query":"Read a file and split its content into a list of words.","code":"with open('words.txt', 'r') as file:\n    content = file.read()\nwords = content.split()"}
{"query":"Copy the content of 'source.txt' to 'destination.txt'.","code":"with open('source.txt', 'r') as source_file, open('destination.txt', 'w') as dest_file:\n    for line in source_file:\n        dest_file.write(line)"}
{"query":"Use 'with' statement to open and read a file named 'example.txt', handling potential exceptions.","code":"try:\n    with open('example.txt', 'r') as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print('File not found')"}
{"query":"This code calculates the mean of a list of numbers.","code":"def calculate_mean(numbers):\n  return sum(numbers) / len(numbers)"}
{"query":"This code snippet implements a simple linear regression model.","code":"def linear_regression(x, y):\n  n = len(x)\n  x_mean = sum(x) / n\n  y_mean = sum(y) / n\n  b1 = sum([(x[i] - x_mean) * (y[i] - y_mean) for i in range(n)]) / sum([(x[i] - x_mean) ** 2 for i in range(n)])\n  b0 = y_mean - b1 * x_mean\n  return b0, b1"}
{"query":"This code calculates the dot product of two vectors.","code":"def dot_product(v1, v2):\n  return sum([v1[i] * v2[i] for i in range(len(v1))])"}
{"query":"This code normalizes a list of numbers to a range between 0 and 1.","code":"def normalize(numbers):\n  min_val = min(numbers)\n  max_val = max(numbers)\n  return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"query":"This code calculates the Euclidean distance between two points.","code":"import math\ndef euclidean_distance(p1, p2):\n  return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))"}
{"query":"This code implements a simple perceptron for binary classification.","code":"import numpy as np\ndef predict(weights, inputs):\n  return 1 if np.dot(weights, inputs) >= 0 else 0"}
{"query":"This code snippet calculates the sigmoid function.","code":"import math\ndef sigmoid(x):\n  return 1 / (1 + math.exp(-x))"}
{"query":"This code reshapes a NumPy array.","code":"import numpy as np\ndef reshape_array(arr, new_shape):\n  return arr.reshape(new_shape)"}
{"query":"This code computes the mean squared error.","code":"def mean_squared_error(y_true, y_predicted):\n  return sum([(y_true[i] - y_predicted[i])**2 for i in range(len(y_true))]) / len(y_true)"}
{"query":"This code creates a one-hot encoded vector for a given integer.","code":"def one_hot_encode(index, num_classes):\n  vector = [0] * num_classes\n  vector[index] = 1\n  return vector"}
{"query":"This code applies a ReLU activation function.","code":"def relu(x):\n  return max(0, x)"}
{"query":"This code implements the Adam optimizer.","code":"import numpy as np\ndef adam_optimizer(dw, dm, dv, beta1, beta2, lr, epsilon):\n  dm = beta1 * dm + (1- beta1) * dw\n  dv = beta2 * dv + (1- beta2) * dw**2\n  m_corrected = dm / (1-beta1)\n  v_corrected = dv / (1-beta2)\n  return m_corrected * lr / (np.sqrt(v_corrected) + epsilon), dm, dv"}
{"query":"This code calculates the confusion matrix.","code":"def confusion_matrix(y_true, y_pred):\n  from sklearn.metrics import confusion_matrix\n  return confusion_matrix(y_true, y_pred)"}
{"query":"This code calculates the accuracy of a classification model.","code":"from sklearn.metrics import accuracy_score\ndef calculate_accuracy(y_true, y_pred):\n  return accuracy_score(y_true, y_pred)"}
{"query":"This code calculates the precision of a classification model.","code":"from sklearn.metrics import precision_score\ndef calculate_precision(y_true, y_pred):\n  return precision_score(y_true, y_pred)"}
{"query":"This code snippet calculates the F1-score.","code":"from sklearn.metrics import f1_score\ndef calculate_f1_score(y_true, y_pred):\n  return f1_score(y_true, y_pred)"}
{"query":"This code calculates the mean of a list of numbers.","code":"numbers = [1, 2, 3, 4, 5]\nmean = sum(numbers) / len(numbers)"}
{"query":"This code implements a simple linear regression model.","code":"from sklearn.linear_model import LinearRegression\nX = [[1], [2], [3], [4], [5]]\ny = [2, 4, 5, 4, 5]\nmodel = LinearRegression()\nmodel.fit(X, y)\nprint(model.predict([[6]]));"}
{"query":"This code snippet demonstrates how to perform k-means clustering.","code":"from sklearn.cluster import KMeans\nX = [[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]]\nkmeans = KMeans(n_clusters=2, random_state=0, n_init=10)\nkmeans.fit(X)\nprint(kmeans.labels_)"}
{"query":"This code trains a logistic regression classifier.","code":"from sklearn.linear_model import LogisticRegression\nX = [[0, 0], [0, 1], [1, 0], [1, 1]]\ny = [0, 1, 1, 0]\nmodel = LogisticRegression()\nmodel.fit(X, y)\nprint(model.predict([[0, 0]]))"}
{"query":"This code calculates the dot product of two vectors.","code":"import numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\ndot_product = np.dot(a, b)"}
{"query":"This code calculates the Euclidean distance between two points.","code":"import numpy as np\npoint1 = np.array([1, 2])\npoint2 = np.array([4, 6])\ndistance = np.linalg.norm(point1 - point2)"}
{"query":"This code snippet implements a simple perceptron algorithm.","code":"import numpy as np\ndef step_function(x):\n    return 1 if x >= 0 else 0\nweights = np.array([0.5, 0.5])\nbias = -0.8\nX = np.array([0, 1])\nweighted_sum = np.dot(X, weights) + bias\noutput = step_function(weighted_sum)"}
{"query":"This code calculates the confusion matrix for a classification task.","code":"from sklearn.metrics import confusion_matrix\ny_true = [0, 1, 0, 1]\ny_pred = [0, 1, 1, 0]\nmatrix = confusion_matrix(y_true, y_pred)"}
{"query":"This code uses pandas to read a CSV file.","code":"import pandas as pd\ndf = pd.read_csv('data.csv')"}
{"query":"This code visualizes data using a scatter plot.","code":"import matplotlib.pyplot as plt\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 1, 3, 5]\nplt.scatter(X, y)\nplt.show()"}
{"query":"This code normalizes data using MinMaxScaler.","code":"from sklearn.preprocessing import MinMaxScaler\ndata = [[1, 2], [3, 4], [5, 6]]\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(data)"}
{"query":"This code splits data into training and testing sets.","code":"from sklearn.model_selection import train_test_split\nX = [[1, 2], [3, 4], [5, 6], [7, 8]]\ny = [0, 1, 0, 1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"}
{"query":"This code calculates the accuracy of a model.","code":"from sklearn.metrics import accuracy_score\ny_true = [0, 1, 0, 1]\ny_pred = [0, 1, 1, 0]\naccuracy = accuracy_score(y_true, y_pred)"}
{"query":"This code creates a simple decision tree classifier.","code":"from sklearn.tree import DecisionTreeClassifier\nX = [[0, 0], [0, 1], [1, 0], [1, 1]]\ny = [0, 1, 1, 0]\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\nprint(model.predict([[0, 0]]))"}
{"query":"This code performs Principal Component Analysis (PCA) for dimensionality reduction.","code":"from sklearn.decomposition import PCA\nX = [[1, 2], [3, 4], [5, 6]]\npca = PCA(n_components=1)\nX_reduced = pca.fit_transform(X)"}
{"query":"This code calculates the F1-score for a classification model.","code":"from sklearn.metrics import f1_score\ny_true = [0, 1, 0, 1]\ny_pred = [0, 1, 1, 0]\nf1 = f1_score(y_true, y_pred)"}
{"query":"This code calculates the mean of a list of numbers.","code":"def calculate_mean(numbers):\n    return sum(numbers) / len(numbers)"}
{"query":"This code implements a simple linear regression model.","code":"def linear_regression(x, y):\n    n = len(x)\n    x_mean = sum(x) / n\n    y_mean = sum(y) / n\n    numerator = sum([(x[i] - x_mean) * (y[i] - y_mean) for i in range(n)])\n    denominator = sum([(x[i] - x_mean) ** 2 for i in range(n)])\n    b1 = numerator / denominator\n    b0 = y_mean - b1 * x_mean\n    return b0, b1"}
{"query":"This code snippet calculates the variance of a dataset.","code":"def calculate_variance(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum([(x - mean) ** 2 for x in numbers]) / len(numbers)"}
{"query":"This code defines a function to compute the standard deviation.","code":"import math\ndef calculate_std_dev(numbers):\n    variance = calculate_variance(numbers)\n    return math.sqrt(variance)"}
{"query":"This code implements the sigmoid activation function.","code":"import math\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))"}
{"query":"This code snippet implements the cross-entropy loss function.","code":"import math\ndef cross_entropy_loss(y_true, y_pred):\n    return -sum(y_true[i] * math.log(y_pred[i]) for i in range(len(y_true)))"}
{"query":"This code defines a function for calculating the dot product of two vectors.","code":"def dot_product(v1, v2):\n    return sum(v1[i] * v2[i] for i in range(len(v1)))"}
{"query":"This code calculates the Euclidean distance between two points.","code":"import math\ndef euclidean_distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))"}
{"query":"This code computes the Manhattan distance between two points.","code":"def manhattan_distance(p1, p2):\n    return sum([abs(p1[i] - p2[i]) for i in range(len(p1))])"}
{"query":"This code implements a function to normalize a list of numbers.","code":"def normalize(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"query":"This code provides a function to calculate the accuracy of a classification model.","code":"def accuracy(y_true, y_pred):\n    correct = sum(1 for i in range(len(y_true)) if y_true[i] == y_pred[i])\n    return correct / len(y_true)"}
{"query":"This code snippet implements a simple k-NN classifier.","code":"from collections import Counter\nimport math\ndef euclidean_distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i]) ** 2 for i in range(len(p1))]))\ndef knn(training_data, test_point, k):\n    distances = [euclidean_distance(test_point, train_point[0]) for train_point in training_data]\n    k_nearest_indices = sorted(range(len(distances)), key=lambda i: distances[i])[:k]\n    labels = [training_data[i][1] for i in k_nearest_indices]\n    return Counter(labels).most_common(1)[0][0]"}
{"query":"This code implements the ReLU activation function.","code":"def relu(x):\n    return max(0, x)"}
{"query":"This code calculates the mean squared error.","code":"def mean_squared_error(y_true, y_pred):\n    return sum([(y_true[i] - y_pred[i]) ** 2 for i in range(len(y_true))]) / len(y_true)"}
{"query":"This code defines a function to perform one-hot encoding.","code":"def one_hot_encode(data):\n    unique_values = sorted(list(set(data)))\n    encoded_data = []\n    for value in data:\n        encoding = [0] * len(unique_values)\n        encoding[unique_values.index(value)] = 1\n        encoded_data.append(encoding)\n    return encoded_data"}
{"query":"This code implements a function to calculate the confusion matrix.","code":"def confusion_matrix(y_true, y_pred):\n    classes = sorted(list(set(y_true)))\n    matrix = [[0 for _ in classes] for _ in classes]\n    for i in range(len(y_true)):\n        true_index = classes.index(y_true[i])\n        pred_index = classes.index(y_pred[i])\n        matrix[true_index][pred_index] += 1\n    return matrix"}
{"query":"This code calculates the mean of a list of numbers.","code":"def calculate_mean(numbers):\n  return sum(numbers) / len(numbers)"}
{"query":"This Python code snippet implements a simple linear regression model.","code":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit([[1, 2], [3, 4]], [5, 6])\nprint(model.predict([[7, 8]]))"}
{"query":"This code demonstrates how to perform k-means clustering.","code":"from sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nkmeans = KMeans(n_clusters=2, random_state=0, n_init=10).fit(X)\nprint(kmeans.labels_)"}
{"query":"This snippet calculates the dot product of two vectors.","code":"import numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\ndot_product = np.dot(a, b)\nprint(dot_product)"}
{"query":"This code normalizes a list of numbers to a range of 0 to 1.","code":"def normalize(numbers):\n  min_val = min(numbers)\n  max_val = max(numbers)\n  return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"query":"This code implements a simple perceptron.","code":"import numpy as np\ndef predict(inputs, weights, bias):\n  return 1 if np.dot(inputs, weights) + bias > 0 else 0"}
{"query":"This code calculates the sigmoid function.","code":"import numpy as np\ndef sigmoid(x):\n  return 1 / (1 + np.exp(-x))"}
{"query":"This code performs a simple train-test split on a dataset.","code":"from sklearn.model_selection import train_test_split\nX = [[0, 1], [2, 3], [4, 5], [6, 7]]\ny = [0, 1, 0, 1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)\nprint(X_train)"}
{"query":"This code calculates the cosine similarity between two vectors.","code":"import numpy as np\ndef cosine_similarity(a, b):\n  return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))"}
{"query":"This code implements a basic decision tree classifier.","code":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit([[0, 0], [1, 1]], [0, 1])\nprint(model.predict([[0, 1]]))"}
{"query":"This code calculates the Euclidean distance between two points.","code":"import numpy as np\ndef euclidean_distance(a, b):\n  return np.linalg.norm(np.array(a) - np.array(b))"}
{"query":"This code snippet demonstrates how to use a support vector machine.","code":"from sklearn.svm import SVC\nmodel = SVC(kernel='linear')\nmodel.fit([[0, 0], [1, 1]], [0, 1])\nprint(model.predict([[0.2, 0.2]]))"}
{"query":"This code calculates the mean squared error.","code":"from sklearn.metrics import mean_squared_error\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\nprint(mean_squared_error(y_true, y_pred))"}
{"query":"This code performs Principal Component Analysis (PCA).","code":"from sklearn.decomposition import PCA\nimport numpy as np\nX = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\npca = PCA(n_components=2)\npca.fit(X)\nprint(pca.explained_variance_ratio_)"}
{"query":"This code calculates the accuracy of a classification model.","code":"from sklearn.metrics import accuracy_score\ny_true = [0, 1, 1, 0]\ny_pred = [0, 1, 0, 0]\nprint(accuracy_score(y_true, y_pred))"}
{"query":"This code implements a simple implementation of gradient descent.","code":"import numpy as np\ndef gradient_descent(X, y, learning_rate, epochs):\n  w = np.zeros(X.shape[1])\n  for epoch in range(epochs):\n    y_pred = X @ w\n    error = y_pred - y\n    gradient = (X.T @ error) / len(y)\n    w -= learning_rate * gradient\n  return w"}
{"query":"This code snippet calculates the mean of a list of numbers.","code":"def calculate_mean(numbers):\n  return sum(numbers) / len(numbers)"}
{"query":"This code creates a simple linear regression model.","code":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit([[0, 0], [1, 1], [2, 2]], [0, 1, 2])\nmodel.predict([[3, 3]])"}
{"query":"This code implements a basic k-NN classifier.","code":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit([[0, 0], [1, 1]], [0, 1])\nknn.predict([[0.5, 0.5]])"}
{"query":"This code snippet normalizes data using MinMaxScaler.","code":"from sklearn.preprocessing import MinMaxScaler\ndata = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]\nscaler = MinMaxScaler()\nprint(scaler.fit_transform(data))"}
{"query":"This code performs Principal Component Analysis (PCA) for dimensionality reduction.","code":"from sklearn.decomposition import PCA\nimport numpy as np\npca = PCA(n_components=2)\ndata = np.array([[1,2,3], [4,5,6], [7,8,9]])\npca.fit(data)\nprint(pca.transform(data))"}
{"query":"This code trains a decision tree classifier.","code":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit([[0, 0], [1, 1]], [0, 1])\nmodel.predict([[0.5, 0.5]])"}
{"query":"This code demonstrates the use of a simple perceptron.","code":"import numpy as np\ndef perceptron(x, w, b):\n  return 1 if (np.dot(w, x) + b) > 0 else 0"}
{"query":"This code snippet calculates the accuracy of a model.","code":"from sklearn.metrics import accuracy_score\ny_true = [0, 1, 0, 1]\ny_pred = [0, 1, 1, 1]\naccuracy_score(y_true, y_pred)"}
{"query":"This code implements a basic gradient descent algorithm.","code":"import numpy as np\ndef gradient_descent(X, y, learning_rate=0.01, epochs=100):\n  w = np.zeros(X.shape[1])\n  b = 0\n  for _ in range(epochs):\n    y_pred = np.dot(X, w) + b\n    dw = (1/len(X)) * np.dot(X.T, (y_pred - y))\n    db = (1/len(X)) * np.sum(y_pred - y)\n    w -= learning_rate * dw\n    b -= learning_rate * db\n  return w, b"}
{"query":"This code demonstrates how to split data into training and testing sets.","code":"from sklearn.model_selection import train_test_split\nX = [[0, 0], [1, 1], [2, 2], [3, 3]]\ny = [0, 1, 1, 0]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"}
{"query":"This code calculates the confusion matrix.","code":"from sklearn.metrics import confusion_matrix\ny_true = [0, 1, 0, 1]\ny_pred = [0, 1, 1, 0]\nconfusion_matrix(y_true, y_pred)"}
{"query":"This code snippet calculates the root mean squared error.","code":"from sklearn.metrics import mean_squared_error\nimport numpy as np\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\nmean_squared_error(y_true, y_pred, squared=False)"}
{"query":"This code demonstrates the use of cross-validation.","code":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nmodel = LinearRegression()\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 8, 9])\nscores = cross_val_score(model, X, y, cv=2)\nprint(scores)"}
{"query":"This code trains a Support Vector Machine (SVM) classifier.","code":"from sklearn.svm import SVC\nmodel = SVC(kernel='linear')\nmodel.fit([[0, 0], [1, 1]], [0, 1])\nmodel.predict([[0.5, 0.5]])"}
{"query":"This code snippet implements a simple one-layer neural network using NumPy.","code":"import numpy as np\ndef sigmoid(x):\n  return 1 / (1 + np.exp(-x))\ndef predict(X, w, b):\n  z = np.dot(X, w) + b\n  return sigmoid(z)"}
{"query":"This code calculates the R-squared value for a linear regression model.","code":"from sklearn.metrics import r2_score\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\nr2_score(y_true, y_pred)"}
{"query":"This code trains a linear regression model.","code":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)"}
{"query":"This code predicts using a trained linear regression model.","code":"y_pred = model.predict(X_test)"}
{"query":"This code calculates the mean squared error.","code":"from sklearn.metrics import mean_squared_error\nimport numpy as np\nprint(mean_squared_error(y_true, y_pred))"}
{"query":"This code demonstrates a simple k-means clustering.","code":"from sklearn.cluster import KMeans\nmodel = KMeans(n_clusters=3)\nmodel.fit(X)"}
{"query":"This code trains a logistic regression model.","code":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)"}
{"query":"This code calculates the accuracy of a model.","code":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_true, y_pred)"}
{"query":"This code splits data into training and testing sets.","code":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"}
{"query":"This code performs principal component analysis for dimensionality reduction.","code":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nX_reduced = pca.fit_transform(X)"}
{"query":"This code implements a simple decision tree classifier.","code":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)"}
{"query":"This code calculates the confusion matrix.","code":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true, y_pred)"}
{"query":"This code standardizes features using StandardScaler.","code":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)"}
{"query":"This code trains a Support Vector Machine classifier.","code":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train, y_train)"}
{"query":"This code performs cross-validation on a model.","code":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(model, X, y, cv=5)"}
{"query":"This code implements a simple Naive Bayes classifier.","code":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)"}
{"query":"This code calculates the F1-score.","code":"from sklearn.metrics import f1_score\nf1 = f1_score(y_true, y_pred)"}
{"query":"This code implements a simple perceptron.","code":"from sklearn.linear_model import Perceptron\nmodel = Perceptron()\nmodel.fit(X_train, y_train)"}
{"query":"Calculate the factorial of a given number.","code":"def factorial(n): return 1 if n == 0 else n * factorial(n-1)"}
{"query":"Compute the sum of a list of numbers.","code":"def sum_list(numbers): return sum(numbers)"}
{"query":"Find the average of a list of numbers.","code":"def average(numbers): return sum(numbers) / len(numbers)"}
{"query":"Determine if a number is prime.","code":"def is_prime(n): return n > 1 and all(n % i for i in range(2, int(n**0.5) + 1))"}
{"query":"Calculate the square root of a number.","code":"def square_root(n): return n**0.5"}
{"query":"Generate a Fibonacci sequence up to n terms.","code":"def fibonacci(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a + b"}
{"query":"Calculate the area of a circle given its radius.","code":"import math; def circle_area(radius): return math.pi * radius**2"}
{"query":"Convert Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32"}
{"query":"Calculate the distance between two points in a 2D plane.","code":"import math; def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"}
{"query":"Compute the dot product of two vectors.","code":"def dot_product(v1, v2): return sum(x * y for x, y in zip(v1, v2))"}
{"query":"Calculate the derivative of a simple polynomial.","code":"def derivative(coeffs): return [i * coeffs[i] for i in range(1, len(coeffs))]"}
{"query":"Integrate a simple function using the trapezoidal rule.","code":"def trapezoidal_rule(f, a, b, n): h = (b - a) / n; sum_val = 0.5 * (f(a) + f(b)); for i in range(1, n): sum_val += f(a + i * h); return h * sum_val"}
{"query":"Solve a quadratic equation and return the roots.","code":"import cmath; def solve_quadratic(a, b, c): delta = (b**2) - 4*(a*c); root1 = (-b - cmath.sqrt(delta)) / (2*a); root2 = (-b + cmath.sqrt(delta)) / (2*a); return root1, root2"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics; def standard_deviation(numbers): return statistics.stdev(numbers)"}
{"query":"Generate a random number between 0 and 1.","code":"import random; def random_number(): return random.random()"}
{"query":"Find the greatest common divisor (GCD) of two numbers.","code":"import math; def gcd(a, b): return math.gcd(a, b)"}
{"query":"Calculate the area of a circle given its radius.","code":"radius = 5\narea = 3.14159 * radius * radius\nprint(area)"}
{"query":"Compute the factorial of a given number using recursion.","code":"def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))"}
{"query":"Determine the sum of a list of numbers.","code":"numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = sum(numbers)\nprint(sum_of_numbers)"}
{"query":"Calculate the greatest common divisor (GCD) of two numbers.","code":"def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nprint(gcd(12, 18))"}
{"query":"Generate a Fibonacci sequence up to a specified limit.","code":"limit = 10\na, b = 0, 1\nwhile a < limit:\n    print(a)\n    a, b = b, a + b"}
{"query":"Find the square root of a number.","code":"number = 25\nimport math\nprint(math.sqrt(number))"}
{"query":"Convert Celsius to Fahrenheit.","code":"celsius = 25\nfahrenheit = (celsius * 9/5) + 32\nprint(fahrenheit)"}
{"query":"Calculate the average of a list of numbers.","code":"numbers = [10, 20, 30, 40, 50]\naverage = sum(numbers) / len(numbers)\nprint(average)"}
{"query":"Determine if a number is prime.","code":"def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(17))"}
{"query":"Calculate the distance between two points in 2D space.","code":"import math\npoint1 = (1, 2)\npoint2 = (4, 6)\ndistance = math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)\nprint(distance)"}
{"query":"Solve a quadratic equation and print the roots.","code":"import cmath\na, b, c = 1, -5, 6\ndiscriminant = (b**2) - 4*(a*c)\nroot1 = (-b - cmath.sqrt(discriminant)) / (2*a)\nroot2 = (-b + cmath.sqrt(discriminant)) / (2*a)\nprint(root1, root2)"}
{"query":"Calculate the volume of a sphere given its radius.","code":"radius = 3\nvolume = (4/3) * 3.14159 * radius**3\nprint(volume)"}
{"query":"Perform a linear interpolation between two values.","code":"def linear_interpolation(x0, y0, x1, y1, x):\n    y = y0 + ((x - x0) * (y1 - y0) / (x1 - x0))\n    return y\nprint(linear_interpolation(0, 0, 10, 20, 5))"}
{"query":"Calculate the dot product of two vectors.","code":"def dot_product(vector1, vector2):\n    return sum(x * y for x, y in zip(vector1, vector2))\nvector_a = [1, 2, 3]\nvector_b = [4, 5, 6]\nprint(dot_product(vector_a, vector_b))"}
{"query":"Generate a random number between 0 and 1.","code":"import random\nrandom_number = random.random()\nprint(random_number)"}
{"query":"Implement the bisection method to find the root of a function.","code":"def f(x):\n    return x**2 - 4\ndef bisection(a, b, tol):\n    while (b - a) / 2 > tol:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2\nprint(bisection(1, 3, 0.001))"}
{"query":"Calculate the area of a circle given its radius.","code":"area = 3.14159 * radius * radius"}
{"query":"Compute the factorial of a given number.","code":"def factorial(n): result = 1 for i in range(1, n + 1): result *= i return result"}
{"query":"Determine if a number is prime.","code":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"}
{"query":"Calculate the distance between two points in a 2D plane.","code":"distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5"}
{"query":"Generate the Fibonacci sequence up to a specified limit.","code":"def fibonacci(limit): a, b = 0, 1 while a <= limit: yield a a, b = b, a + b"}
{"query":"Solve a quadratic equation and find its roots.","code":"delta = (b**2) - 4*(a*c) x1 = (-b - delta**0.5) / (2*a) x2 = (-b + delta**0.5) / (2*a)"}
{"query":"Calculate the volume of a sphere.","code":"volume = (4/3) * 3.14159 * radius**3"}
{"query":"Compute the sum of a list of numbers.","code":"sum_of_numbers = sum(numbers)"}
{"query":"Calculate the mean (average) of a list of numbers.","code":"mean = sum(numbers) / len(numbers)"}
{"query":"Find the greatest common divisor (GCD) of two numbers.","code":"def gcd(a, b): while(b): a, b = b, a % b return a"}
{"query":"Convert Celsius to Fahrenheit.","code":"fahrenheit = (celsius * 9/5) + 32"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics standard_deviation = statistics.stdev(numbers)"}
{"query":"Perform matrix addition of two matrices.","code":"result_matrix = [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]"}
{"query":"Calculate the dot product of two vectors.","code":"dot_product = sum(x * y for x, y in zip(vector1, vector2))"}
{"query":"Implement a simple linear regression model.","code":"import numpy as np slope, intercept = np.polyfit(x_values, y_values, 1)"}
{"query":"Calculate the derivative of a simple polynomial function.","code":"derivative = 2 * coefficient * x + constant"}
{"query":"Calculate the factorial of a given number.","code":"def factorial(n): return 1 if n == 0 else n * factorial(n-1)"}
{"query":"Find the greatest common divisor (GCD) of two numbers.","code":"def gcd(a, b): return gcd(b, a % b) if b else a"}
{"query":"Compute the Fibonacci sequence up to a specified limit.","code":"def fibonacci(limit): a, b = 0, 1; while a <= limit: yield a; a, b = b, a + b"}
{"query":"Determine if a number is prime.","code":"def is_prime(n): if n <= 1: return False; return all(n % i for i in range(2, int(n**0.5) + 1))"}
{"query":"Calculate the area of a circle given its radius.","code":"import math; def circle_area(radius): return math.pi * radius**2"}
{"query":"Convert Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32"}
{"query":"Calculate the sum of a list of numbers.","code":"def sum_list(numbers): return sum(numbers)"}
{"query":"Find the average of a list of numbers.","code":"def average_list(numbers): return sum(numbers) / len(numbers) if numbers else 0"}
{"query":"Calculate the volume of a sphere.","code":"import math; def sphere_volume(radius): return (4/3) * math.pi * radius**3"}
{"query":"Solve a quadratic equation for its roots.","code":"import cmath; def solve_quadratic(a, b, c): delta = (b**2) - 4*(a*c); root1 = (-b - cmath.sqrt(delta)) / (2*a); root2 = (-b + cmath.sqrt(delta)) / (2*a); return root1, root2"}
{"query":"Calculate the dot product of two vectors.","code":"def dot_product(v1, v2): return sum(x*y for x, y in zip(v1, v2))"}
{"query":"Calculate the magnitude of a vector.","code":"import math; def magnitude(v): return math.sqrt(sum(pow(element, 2) for element in v))"}
{"query":"Implement a simple linear regression model.","code":"def linear_regression(x, y): n = len(x); sum_x = sum(x); sum_y = sum(y); sum_xy = sum(x_i * y_i for x_i, y_i in zip(x, y)); sum_x2 = sum(x_i**2 for x_i in x); b = (n*sum_xy - sum_x*sum_y) / (n*sum_x2 - sum_x**2); a = (sum_y - b*sum_x) / n; return a, b"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import math; def standard_deviation(numbers): n = len(numbers); if n < 2: return 0; mean = sum(numbers) / n; variance = sum((x - mean) ** 2 for x in numbers) / (n - 1); return math.sqrt(variance)"}
{"query":"Integrate a function using the trapezoidal rule.","code":"def trapezoidal_rule(f, a, b, n): h = (b - a) / n; sum_val = 0.5 * (f(a) + f(b)); for i in range(1, n): sum_val += f(a + i * h); return h * sum_val"}
{"query":"Perform matrix multiplication of two matrices.","code":"def matrix_multiply(A, B): rows_A = len(A); cols_A = len(A[0]); cols_B = len(B[0]); C = [[0 for row in range(cols_B)] for col in range(rows_A)]; for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j]; return C"}
{"query":"Calculate the factorial of a given integer.","code":"def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"query":"Compute the sum of a list of numbers.","code":"def sum_list(numbers):\n  return sum(numbers)"}
{"query":"Determine if a number is prime.","code":"def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"}
{"query":"Calculate the area of a circle given its radius.","code":"import math\ndef circle_area(radius):\n  return math.pi * radius**2"}
{"query":"Find the greatest common divisor (GCD) of two integers.","code":"def gcd(a, b):\n  while(b):\n    a, b = b, a % b\n  return a"}
{"query":"Convert Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius):\n  return (celsius * 9/5) + 32"}
{"query":"Calculate the Fibonacci sequence up to n terms.","code":"def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    list_fib = [0, 1]\n    while len(list_fib) < n:\n      next_fib = list_fib[-1] + list_fib[-2]\n      list_fib.append(next_fib)\n    return list_fib"}
{"query":"Calculate the mean of a list of numbers.","code":"def calculate_mean(numbers):\n  return sum(numbers) / len(numbers)"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import math\ndef calculate_std_dev(numbers):\n  mean = sum(numbers) / len(numbers)\n  variance = sum([(x - mean) ** 2 for x in numbers]) / len(numbers)\n  return math.sqrt(variance)"}
{"query":"Solve a quadratic equation and return its roots.","code":"import cmath\ndef solve_quadratic(a, b, c):\n    delta = (b**2) - 4*(a*c)\n    root1 = (-b - cmath.sqrt(delta)) / (2*a)\n    root2 = (-b + cmath.sqrt(delta)) / (2*a)\n    return root1, root2"}
{"query":"Perform matrix addition on two 2x2 matrices.","code":"def matrix_addition(matrix1, matrix2):\n  result = []\n  for i in range(len(matrix1)):\n    row = []\n    for j in range(len(matrix1[0])):\n      row.append(matrix1[i][j] + matrix2[i][j])\n    result.append(row)\n  return result"}
{"query":"Calculate the dot product of two vectors.","code":"def dot_product(vector1, vector2):\n  return sum(x * y for x, y in zip(vector1, vector2))"}
{"query":"Integrate a function using the trapezoidal rule.","code":"def trapezoidal_rule(f, a, b, n):\n  h = (b - a) / n\n  xi = [a + i * h for i in range(n + 1)]\n  yi = [f(x) for x in xi]\n  return h * (0.5 * yi[0] + sum(yi[1:-1]) + 0.5 * yi[-1])"}
{"query":"Calculate the distance between two points in 2D space.","code":"import math\ndef distance(x1, y1, x2, y2):\n  return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"}
{"query":"Find the roots of a polynomial using the Newton-Raphson method.","code":"def newton_raphson(f, f_prime, x0, tol=1e-6, max_iter=100):\n  x = x0\n  for _ in range(max_iter):\n    x_next = x - f(x) / f_prime(x)\n    if abs(x_next - x) < tol:\n      return x_next\n    x = x_next\n  return None"}
{"query":"Perform a simple linear regression.","code":"def linear_regression(x, y):\n    n = len(x)\n    x_mean = sum(x) / n\n    y_mean = sum(y) / n\n    numerator = sum((x[i] - x_mean) * (y[i] - y_mean) for i in range(n))\n    denominator = sum((x[i] - x_mean) ** 2 for i in range(n))\n    b1 = numerator / denominator\n    b0 = y_mean - b1 * x_mean\n    return b0, b1"}
{"query":"Calculate the factorial of a given number using recursion.","code":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"}
{"query":"Compute the Fibonacci sequence up to a specified number of terms.","code":"def fibonacci(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a + b"}
{"query":"Find the greatest common divisor (GCD) of two numbers.","code":"def gcd(a, b): while(b): a, b = b, a % b; return a"}
{"query":"Determine if a number is prime.","code":"def is_prime(n): if n <= 1: return False; for i in range(2, int(n**0.5) + 1): if n % i == 0: return False; return True"}
{"query":"Calculate the area of a circle, given its radius.","code":"import math; def circle_area(radius): return math.pi * radius**2"}
{"query":"Convert Celsius to Fahrenheit.","code":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32"}
{"query":"Calculate the distance between two points in a 2D plane.","code":"import math; def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"}
{"query":"Solve a quadratic equation and return the roots.","code":"import cmath; def solve_quadratic(a, b, c): delta = (b**2) - 4*(a*c); root1 = (-b - cmath.sqrt(delta)) / (2*a); root2 = (-b + cmath.sqrt(delta)) / (2*a); return root1, root2"}
{"query":"Calculate the sum of a list of numbers.","code":"def sum_list(numbers): return sum(numbers)"}
{"query":"Calculate the average of a list of numbers.","code":"def average_list(numbers): return sum(numbers) / len(numbers)"}
{"query":"Calculate the standard deviation of a list of numbers.","code":"import statistics; def std_dev(numbers): return statistics.stdev(numbers)"}
{"query":"Implement a basic linear search algorithm.","code":"def linear_search(list, target): for i in range(len(list)): if list[i] == target: return i; return -1"}
{"query":"Calculate the volume of a sphere, given its radius.","code":"import math; def sphere_volume(radius): return (4/3) * math.pi * radius**3"}
{"query":"Convert radians to degrees.","code":"import math; def radians_to_degrees(radians): return radians * (180/math.pi)"}
{"query":"Calculate the dot product of two vectors.","code":"def dot_product(vector1, vector2): return sum(x*y for x, y in zip(vector1, vector2))"}
{"query":"Calculate the cross product of two 3D vectors.","code":"def cross_product(v1, v2): return [v1[1]*v2[2] - v1[2]*v2[1], v1[2]*v2[0] - v1[0]*v2[2], v1[0]*v2[1] - v1[1]*v2[0]]"}
{"query":"Convert an image to grayscale using a simple formula.","code":"gray = lambda rgb: 0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]"}
{"query":"Apply a threshold to binarize an image.","code":"thresholded = lambda pixel, thresh: 255 if pixel > thresh else 0"}
{"query":"Calculate the mean of pixel values in an image.","code":"mean = lambda pixels: sum(pixels) / len(pixels)"}
{"query":"Implement a simple box blur filter.","code":"blurred = lambda pixels, kernel_size: sum(pixels) / kernel_size**2"}
{"query":"Calculate the standard deviation of pixel values.","code":"std_dev = lambda pixels, mean: (sum([(x - mean) ** 2 for x in pixels]) / len(pixels)) ** 0.5"}
{"query":"Find the edges in an image using a Sobel operator.","code":"sobel_x = lambda pixel_matrix: pixel_matrix[0][0] * -1 + pixel_matrix[0][2] * 1 + pixel_matrix[1][0] * -2 + pixel_matrix[1][2] * 2 + pixel_matrix[2][0] * -1 + pixel_matrix[2][2] * 1"}
{"query":"Implement a simple image sharpening filter.","code":"sharpened = lambda pixel, original, factor: original + factor * (pixel - original)"}
{"query":"Perform a horizontal flip on an image.","code":"flipped = lambda row: row[::-1]"}
{"query":"Apply a color inversion to an image.","code":"inverted = lambda pixel: 255 - pixel"}
{"query":"Calculate the histogram of an image.","code":"histogram = lambda pixels: {i: pixels.count(i) for i in set(pixels)}"}
{"query":"Rotate an image by 90 degrees clockwise.","code":"rotated = lambda image: list(zip(*image[::-1]))"}
{"query":"Increase the brightness of an image.","code":"brightened = lambda pixel, factor: min(255, pixel * factor)"}
{"query":"Reduce the image to a certain width preserving aspect ratio.","code":"resized_width = lambda width, original_width, original_height: int(original_height * (width / original_width))"}
{"query":"Detect the corners in an image with Harris Corner Detection.","code":"harris_response = lambda Ix2, Iy2, Ixy: (Ix2 * Iy2 - Ixy**2) - 0.04 * (Ix2 + Iy2)**2"}
{"query":"Perform a Gaussian blur on a pixel.","code":"gaussian_blur = lambda pixel, kernel: sum(pixel * kernel) / sum(kernel)"}
{"query":"Remove noise from an image with a median filter.","code":"median_filter = lambda pixels: sorted(pixels)[len(pixels) // 2]"}
{"query":"Convert a color image to grayscale using NumPy.","code":"gray = numpy.dot(image[...,:3], [0.2989, 0.5870, 0.1140])"}
{"query":"Apply a Gaussian blur to an image using SciPy.","code":"blurred_image = scipy.ndimage.gaussian_filter(image, sigma=3)"}
{"query":"Resize an image to specific dimensions using OpenCV.","code":"resized_image = cv2.resize(image, (width, height), interpolation=cv2.INTER_AREA)"}
{"query":"Sharpen an image using a simple convolution filter in NumPy.","code":"kernel = numpy.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])\nsharpened_image = scipy.ndimage.convolve(image, kernel)"}
{"query":"Detect edges in an image using the Canny edge detector in OpenCV.","code":"edges = cv2.Canny(image, threshold1=100, threshold2=200)"}
{"query":"Apply a median filter to an image using SciPy.","code":"filtered_image = scipy.ndimage.median_filter(image, size=3)"}
{"query":"Rotate an image by a given angle using OpenCV.","code":"rotated_image = cv2.warpAffine(image, cv2.getRotationMatrix2D((width/2, height/2), angle, 1), (width, height))"}
{"query":"Threshold an image to create a binary image using OpenCV.","code":"ret, thresholded_image = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)"}
{"query":"Calculate the histogram of an image using NumPy.","code":"histogram, bins = numpy.histogram(image.flatten(), 256, [0,256])"}
{"query":"Perform image erosion using a morphological operation in OpenCV.","code":"kernel = numpy.ones((5,5),numpy.uint8)\nerosioned_image = cv2.erode(image, kernel, iterations = 1)"}
{"query":"Perform image dilation using a morphological operation in OpenCV.","code":"kernel = numpy.ones((5,5),numpy.uint8)\ndilated_image = cv2.dilate(image, kernel, iterations = 1)"}
{"query":"Calculate the mean of pixel values in an image using NumPy.","code":"mean_pixel_value = numpy.mean(image)"}
{"query":"Flip an image horizontally using OpenCV.","code":"flipped_image = cv2.flip(image, 1)"}
{"query":"Calculate the standard deviation of pixel values using NumPy.","code":"std_dev = numpy.std(image)"}
{"query":"Apply a Sobel filter for edge detection using SciPy.","code":"sobel_x = scipy.ndimage.sobel(image, axis=0)\nsobel_y = scipy.ndimage.sobel(image, axis=1)"}
{"query":"Convert an image from BGR to RGB using OpenCV.","code":"rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)"}
{"query":"Convert an image to grayscale using the Pillow library.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\ngrayscale_image = image.convert(\"L\")\ngrayscale_image.show()"}
{"query":"Resize an image to a specific width and height.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nresized_image = image.resize((200, 100))\nresized_image.save(\"resized_image.jpg\")"}
{"query":"Apply a Gaussian blur to an image.","code":"from PIL import Image, ImageFilter\nimage = Image.open(\"image.jpg\")\nblurred_image = image.filter(ImageFilter.GaussianBlur(radius=5))\nblurred_image.save(\"blurred_image.jpg\")"}
{"query":"Rotate an image by a specified angle.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nrotated_image = image.rotate(45)\nrotated_image.save(\"rotated_image.jpg\")"}
{"query":"Crop an image to a specific region.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\ncrop_box = (50, 50, 200, 200)\ncropped_image = image.crop(crop_box)\ncropped_image.save(\"cropped_image.jpg\")"}
{"query":"Flip an image horizontally.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nflipped_image = image.transpose(Image.FLIP_LEFT_RIGHT)\nflipped_image.save(\"flipped_image.jpg\")"}
{"query":"Convert an image to black and white (binary).","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\ngrayscale_image = image.convert(\"L\")\nbinary_image = grayscale_image.point(lambda x: 0 if x < 128 else 255)\nbinary_image.save(\"binary_image.jpg\")"}
{"query":"Overlay a watermark image onto a base image.","code":"from PIL import Image\nbase_image = Image.open(\"base.jpg\")\nwatermark_image = Image.open(\"watermark.png\")\nbase_image.paste(watermark_image, (0, 0), watermark_image)\nbase_image.save(\"watermarked_image.jpg\")"}
{"query":"Adjust the brightness of an image.","code":"from PIL import Image, ImageEnhance\nimage = Image.open(\"image.jpg\")\nenhancer = ImageEnhance.Brightness(image)\nbrightened_image = enhancer.enhance(1.5)\nbrightened_image.save(\"brightened_image.jpg\")"}
{"query":"Adjust the contrast of an image.","code":"from PIL import Image, ImageEnhance\nimage = Image.open(\"image.jpg\")\nenhancer = ImageEnhance.Contrast(image)\ncontrasted_image = enhancer.enhance(1.5)\ncontrasted_image.save(\"contrasted_image.jpg\")"}
{"query":"Sharpen an image using a filter.","code":"from PIL import Image, ImageFilter\nimage = Image.open(\"image.jpg\")\nsharpened_image = image.filter(ImageFilter.SHARPEN)\nsharpened_image.save(\"sharpened_image.jpg\")"}
{"query":"Apply a sepia tone effect to an image.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nsepia = [(255, 255, 255), (240, 220, 180)]\nsepia_image = image.convert('RGB')\nsepia_image = sepia_image.convert('L')\nsepia_image = sepia_image.convert('RGB')\nsepia_image.save(\"sepia_image.jpg\")"}
{"query":"Create a thumbnail of an image.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nimage.thumbnail((128, 128))\nimage.save(\"thumbnail.jpg\")"}
{"query":"Change the color of a specific pixel in an image.","code":"from PIL import Image\nimage = Image.open(\"image.jpg\")\nimage.putpixel((10, 10), (255, 0, 0))\nimage.save(\"modified_image.jpg\")"}
{"query":"Detect edges in an image using a filter.","code":"from PIL import Image, ImageFilter\nimage = Image.open(\"image.jpg\")\nedged_image = image.filter(ImageFilter.FIND_EDGES)\nedged_image.save(\"edged_image.jpg\")"}
{"query":"Add text to an image.","code":"from PIL import Image, ImageDraw, ImageFont\nimage = Image.open(\"image.jpg\")\ndraw = ImageDraw.Draw(image)\nfont = ImageFont.truetype(\"arial.ttf\", 20)\ndraw.text((10, 10), \"Hello World\", font=font, fill=(0, 0, 0))\nimage.save(\"text_image.jpg\")"}
{"query":"This code converts an image to grayscale.","code":"gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)"}
{"query":"The code applies a Gaussian blur to the image.","code":"blurred_image = cv2.GaussianBlur(image, (5, 5), 0)"}
{"query":"This code sharpens the image using a simple kernel.","code":"kernel = np.array([[-1,-1,-1], [-1, 9,-1], [-1,-1,-1]])\nsharpened_image = cv2.filter2D(image, -1, kernel)"}
{"query":"The code detects edges in the image using the Canny edge detector.","code":"edges = cv2.Canny(image, 100, 200)"}
{"query":"This code resizes the image to a specific width and height.","code":"resized_image = cv2.resize(image, (width, height))"}
{"query":"The code crops the image to the specified coordinates.","code":"cropped_image = image[y1:y2, x1:x2]"}
{"query":"This code rotates the image by a specified angle.","code":"rotated_image = rotate(image, angle)"}
{"query":"The code translates the image by a specified amount in x and y direction.","code":"M = np.float32([[1, 0, tx], [0, 1, ty]])\ntranslated_image = cv2.warpAffine(image, M, (width, height))"}
{"query":"This code applies a threshold to the image.","code":"ret, thresholded_image = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)"}
{"query":"The code inverts the colors of the image.","code":"inverted_image = cv2.bitwise_not(image)"}
{"query":"This code blurs the image using a median filter.","code":"median_blurred_image = cv2.medianBlur(image, 5)"}
{"query":"The code performs a dilation operation on the image.","code":"kernel = np.ones((5,5),np.uint8)\ndilated_image = cv2.dilate(image, kernel, iterations = 1)"}
{"query":"This code performs an erosion operation on the image.","code":"kernel = np.ones((5,5),np.uint8)\neroded_image = cv2.erode(image, kernel, iterations = 1)"}
{"query":"The code finds contours in a binary image.","code":"contours, hierarchy = cv2.findContours(thresholded_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)"}
{"query":"This code calculates the histogram of an image.","code":"hist = cv2.calcHist([image],[0],None,[256],[0,256])"}
{"query":"The code equalizes the histogram of a grayscale image.","code":"equalized_image = cv2.equalizeHist(gray_image)"}
{"query":"This code converts an image to grayscale.","code":"gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)"}
{"query":"This code applies a Gaussian blur to an image.","code":"blur = cv2.GaussianBlur(image, (5, 5), 0)"}
{"query":"This code resizes an image to a specific width and height.","code":"resized = cv2.resize(image, (width, height))"}
{"query":"This code detects edges in an image using the Canny edge detector.","code":"edges = cv2.Canny(image, threshold1, threshold2)"}
{"query":"This code applies a median filter to remove noise from an image.","code":"median = cv2.medianBlur(image, 5)"}
{"query":"This code threshold the image to produce a binary image.","code":"ret,thresh = cv2.threshold(gray,127,255,cv2.THRESH_BINARY)"}
{"query":"This code rotates an image by a specified angle.","code":"rows, cols = image.shape[:2]\nM = cv2.getRotationMatrix2D((cols/2, rows/2), angle, 1)\nrotated = cv2.warpAffine(image, M, (cols, rows))"}
{"query":"This code crops a region of interest from an image.","code":"cropped = image[y1:y2, x1:x2]"}
{"query":"This code blurs an image with a box filter.","code":"blur = cv2.blur(image, (5,5))"}
{"query":"This code applies a dilation operation to an image.","code":"kernel = np.ones((5,5),np.uint8)\ndilation = cv2.dilate(image,kernel,iterations = 1)"}
{"query":"This code performs an erosion operation on an image.","code":"kernel = np.ones((5,5),np.uint8)\nerosion = cv2.erode(image,kernel,iterations = 1)"}
{"query":"This code calculates the histogram of an image.","code":"hist = cv2.calcHist([image],[0],None,[256],[0,256])"}
{"query":"This code equalizes the histogram of a grayscale image.","code":"equalized = cv2.equalizeHist(gray)"}
{"query":"This code detects corners in an image using the Shi-Tomasi corner detector.","code":"corners = cv2.goodFeaturesToTrack(gray, maxCorners=100, qualityLevel=0.01, minDistance=10)"}
{"query":"This code performs a morphological opening operation on an image.","code":"kernel = np.ones((5,5),np.uint8)\nopening = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)"}
{"query":"This code performs a morphological closing operation on an image.","code":"kernel = np.ones((5,5),np.uint8)\nclosing = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)"}
{"query":"Convert a color image to grayscale.","code":"gray_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2GRAY)"}
{"query":"Apply a Gaussian blur to an image to reduce noise.","code":"blurred_image = cv2.GaussianBlur(image, (5, 5), 0)"}
{"query":"Resize an image to a specific width and height.","code":"resized_image = cv2.resize(image, (width, height))"}
{"query":"Threshold an image to create a binary image.","code":"_, thresholded_image = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)"}
{"query":"Detect edges in an image using the Canny edge detector.","code":"edges = cv2.Canny(image, threshold1, threshold2)"}
{"query":"Rotate an image by a specified angle.","code":"rotated_image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)"}
{"query":"Apply a median filter to an image to reduce noise.","code":"median_filtered_image = cv2.medianBlur(image, 5)"}
{"query":"Erode an image to remove small objects.","code":"eroded_image = cv2.erode(image, kernel, iterations=1)"}
{"query":"Dilate an image to enlarge objects.","code":"dilated_image = cv2.dilate(image, kernel, iterations=1)"}
{"query":"Perform a morphological opening operation on an image.","code":"opened_image = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)"}
{"query":"Perform a morphological closing operation on an image.","code":"closed_image = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)"}
{"query":"Calculate the histogram of an image.","code":"hist = cv2.calcHist([image], [0], None, [256], [0, 256])"}
{"query":"Equalize the histogram of a grayscale image.","code":"equalized_image = cv2.equalizeHist(gray_image)"}
{"query":"Apply a perspective transformation to an image.","code":"warped_image = cv2.warpPerspective(image, M, (width, height))"}
{"query":"Detect circles in an image using the Hough Circle Transform.","code":"circles = cv2.HoughCircles(gray_image, cv2.HOUGH_GRADIENT, 1, minDist, param1=50, param2=30, minRadius=0, maxRadius=0)"}
{"query":"Overlay text on an image.","code":"cv2.putText(image, text, org, font, fontScale, color, thickness, cv2.LINE_AA)"}
{"query":"Create a new table named 'Customers' with columns for ID, Name, and City.","code":"CREATE TABLE Customers (ID INT, Name VARCHAR(255), City VARCHAR(255));"}
{"query":"Insert a new customer record with ID 1, Name 'Alice', and City 'New York'.","code":"INSERT INTO Customers (ID, Name, City) VALUES (1, 'Alice', 'New York');"}
{"query":"Select all columns and rows from the 'Customers' table.","code":"SELECT * FROM Customers;"}
{"query":"Update the city of the customer with ID 1 to 'Los Angeles'.","code":"UPDATE Customers SET City = 'Los Angeles' WHERE ID = 1;"}
{"query":"Delete the customer record with ID 1 from the 'Customers' table.","code":"DELETE FROM Customers WHERE ID = 1;"}
{"query":"Find the customer with the name 'Alice'.","code":"SELECT * FROM Customers WHERE Name = 'Alice';"}
{"query":"Count the total number of customers in the 'Customers' table.","code":"SELECT COUNT(*) FROM Customers;"}
{"query":"Select customers whose city is 'New York' from the 'Customers' table.","code":"SELECT * FROM Customers WHERE City = 'New York';"}
{"query":"Create an index on the 'Name' column of the 'Customers' table.","code":"CREATE INDEX idx_name ON Customers (Name);"}
{"query":"Retrieve distinct city names from the 'Customers' table.","code":"SELECT DISTINCT City FROM Customers;"}
{"query":"Sort the customers by their names in ascending order.","code":"SELECT * FROM Customers ORDER BY Name ASC;"}
{"query":"Find customers whose names start with the letter 'A'.","code":"SELECT * FROM Customers WHERE Name LIKE 'A%';"}
{"query":"Get the average ID of all customers.","code":"SELECT AVG(ID) FROM Customers;"}
{"query":"Find the customer with the maximum ID.","code":"SELECT * FROM Customers WHERE ID = (SELECT MAX(ID) FROM Customers);"}
{"query":"Join the 'Customers' and 'Orders' tables on the customer ID.","code":"SELECT * FROM Customers INNER JOIN Orders ON Customers.ID = Orders.CustomerID;"}
{"query":"Rename the 'Customers' table to 'Clients'.","code":"ALTER TABLE Customers RENAME TO Clients;"}
{"query":"Connects to a SQLite database and prints the SQLite version.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('SELECT SQLITE_VERSION()')\nversion = cursor.fetchone()\nprint(f'SQLite version: {version[0]}')\nconnection.close()"}
{"query":"Creates a table named 'users' in a SQLite database.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)')\nconnection.commit()\nconnection.close()"}
{"query":"Inserts a new user into the 'users' table in a SQLite database.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", ('Alice', 30))\nconnection.commit()\nconnection.close()"}
{"query":"Selects all users from the 'users' table in a SQLite database and prints their names.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('SELECT name FROM users')\nusers = cursor.fetchall()\nfor user in users:\n    print(user[0])\nconnection.close()"}
{"query":"Updates the age of a user with ID 1 in the 'users' table in a SQLite database.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"UPDATE users SET age = ? WHERE id = ?\", (31, 1))\nconnection.commit()\nconnection.close()"}
{"query":"Deletes a user with ID 1 from the 'users' table in a SQLite database.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"DELETE FROM users WHERE id = ?\", (1,))\nconnection.commit()\nconnection.close()"}
{"query":"Selects users from the 'users' table whose age is greater than 25.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"SELECT name FROM users WHERE age > ?\", (25,))\nusers = cursor.fetchall()\nfor user in users:\n    print(user[0])\nconnection.close()"}
{"query":"Counts the number of users in the 'users' table in a SQLite database.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('SELECT COUNT(*) FROM users')\ncount = cursor.fetchone()\nprint(f'Number of users: {count[0]}')\nconnection.close()"}
{"query":"Retrieves the name of the first user from the 'users' table.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('SELECT name FROM users LIMIT 1')\nuser = cursor.fetchone()\nif user:\n    print(user[0])\nconnection.close()"}
{"query":"Orders users by their age in descending order.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('SELECT name, age FROM users ORDER BY age DESC')\nusers = cursor.fetchall()\nfor user in users:\n    print(f'{user[0]}: {user[1]}')\nconnection.close()"}
{"query":"Creates an index on the 'name' column of the 'users' table.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute('CREATE INDEX IF NOT EXISTS idx_name ON users (name)')\nconnection.commit()\nconnection.close()"}
{"query":"Selects users whose name contains the letter 'a'.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"SELECT name FROM users WHERE name LIKE ?\", ('%a%',))\nusers = cursor.fetchall()\nfor user in users:\n    print(user[0])\nconnection.close()"}
{"query":"Performs a JOIN operation between two tables, 'users' and 'orders'.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"SELECT u.name, o.order_id FROM users u JOIN orders o ON u.id = o.user_id\")\nresults = cursor.fetchall()\nfor row in results:\n    print(f'User: {row[0]}, Order ID: {row[1]}')\nconnection.close()"}
{"query":"Rolls back a transaction if an error occurs.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ntry:\n    cursor.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", ('Eve', 28))\n    connection.commit()\nexcept Exception:\n    connection.rollback()\nfinally:\n    connection.close()"}
{"query":"Uses a parameterized query to prevent SQL injection.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\nuser_input = 'Malicious Input'\ncursor.execute(\"SELECT * FROM users WHERE name = ?\", (user_input,))\nresults = cursor.fetchall()\nconnection.close()"}
{"query":"Prints the schema of the 'users' table.","code":"connection = sqlite3.connect('mydatabase.db')\ncursor = connection.cursor()\ncursor.execute(\"PRAGMA table_info(users)\")\nschema = cursor.fetchall()\nfor column in schema:\n    print(column)\nconnection.close()"}
{"query":"Create a new table named 'users' with columns for ID, name, and email.","code":"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, email TEXT);"}
{"query":"Insert a new user record into the 'users' table with sample data.","code":"INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com');"}
{"query":"Retrieve all records from the 'users' table.","code":"SELECT * FROM users;"}
{"query":"Update the email address of a specific user in the 'users' table.","code":"UPDATE users SET email = 'new_email@example.com' WHERE id = 1;"}
{"query":"Delete a user record from the 'users' table based on their ID.","code":"DELETE FROM users WHERE id = 1;"}
{"query":"Select the name and email of all users from the 'users' table.","code":"SELECT name, email FROM users;"}
{"query":"Filter and retrieve users whose name starts with the letter 'A'.","code":"SELECT * FROM users WHERE name LIKE 'A%';"}
{"query":"Order the user records by their names alphabetically.","code":"SELECT * FROM users ORDER BY name ASC;"}
{"query":"Count the total number of users in the 'users' table.","code":"SELECT COUNT(*) FROM users;"}
{"query":"Find the user with the highest ID in the 'users' table.","code":"SELECT * FROM users ORDER BY id DESC LIMIT 1;"}
{"query":"Join the 'users' table with a 'orders' table to retrieve user details and orders.","code":"SELECT users.name, orders.order_id FROM users INNER JOIN orders ON users.id = orders.user_id;"}
{"query":"Create an index on the 'email' column of the 'users' table to speed up searches.","code":"CREATE INDEX idx_email ON users (email);"}
{"query":"Get the distinct email addresses from the 'users' table.","code":"SELECT DISTINCT email FROM users;"}
{"query":"Calculate the average order value grouped by user in an 'orders' table.","code":"SELECT user_id, AVG(order_value) FROM orders GROUP BY user_id;"}
{"query":"Rollback any uncommitted changes in the current transaction.","code":"ROLLBACK;"}
{"query":"Begin a new transaction to ensure data consistency.","code":"BEGIN TRANSACTION;"}
{"query":"Connects to a SQLite database and prints the database version.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute('SELECT SQLITE_VERSION()')\nversion = cursor.fetchone()\nprint(version[0])\nconn.close()"}
{"query":"Creates a table named 'users' in a SQLite database.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\nconn.commit()\nconn.close()"}
{"query":"Inserts a new user into the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"INSERT INTO users (name, age) VALUES ('Alice', 30)\")\nconn.commit()\nconn.close()"}
{"query":"Selects and prints all users from the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM users')\nusers = cursor.fetchall()\nprint(users)\nconn.close()"}
{"query":"Updates the age of a user with a specific ID in the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"UPDATE users SET age = 31 WHERE id = 1\")\nconn.commit()\nconn.close()"}
{"query":"Deletes a user with a specific ID from the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"DELETE FROM users WHERE id = 1\")\nconn.commit()\nconn.close()"}
{"query":"Performs a basic SELECT query to retrieve data from a database, handling potential errors.","code":"try:\n    sqlite3.connect('mydatabase.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM users')\n    users = cursor.fetchall()\n    print(users)\n    conn.close()\nexcept sqlite3.Error as e:\n    print(f\"An error occurred: {e}\")"}
{"query":"Executes a parameterized SQL query to prevent SQL injection.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\nuser_id = 1\ncursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\nuser = cursor.fetchone()\nprint(user)\nconn.close()"}
{"query":"Retrieves the number of rows in the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute('SELECT COUNT(*) FROM users')\ncount = cursor.fetchone()[0]\nprint(count)\nconn.close()"}
{"query":"Filters users by age using a WHERE clause in an SQL query.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users WHERE age > 25\")\nfiltered_users = cursor.fetchall()\nprint(filtered_users)\nconn.close()"}
{"query":"Orders users by name in ascending order using an ORDER BY clause.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users ORDER BY name ASC\")\nordered_users = cursor.fetchall()\nprint(ordered_users)\nconn.close()"}
{"query":"Uses LIMIT to restrict the number of results returned from the 'users' table.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users LIMIT 2\")\nlimited_users = cursor.fetchall()\nprint(limited_users)\nconn.close()"}
{"query":"Performs a JOIN operation between two tables.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"CREATE TABLE IF NOT EXISTS orders (user_id INTEGER, product TEXT)\")\ncursor.execute(\"SELECT users.name, orders.product FROM users JOIN orders ON users.id = orders.user_id\")\nresults = cursor.fetchall()\nprint(results)\nconn.close()"}
{"query":"Uses the LIKE operator for pattern matching in SQL queries.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users WHERE name LIKE 'A%'\")\nmatches = cursor.fetchall()\nprint(matches)\nconn.close()"}
{"query":"Uses the IN operator to check if a value exists in a set of values.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users WHERE age IN (30, 35)\")\nin_users = cursor.fetchall()\nprint(in_users)\nconn.close()"}
{"query":"Uses the BETWEEN operator to select values within a range.","code":"sqlite3.connect('mydatabase.db')\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM users WHERE age BETWEEN 20 AND 35\")\nbetween_users = cursor.fetchall()\nprint(between_users)\nconn.close()"}
{"query":"Connect to a SQLite database named 'mydatabase.db'.","code":"db = sqlite3.connect('mydatabase.db')"}
{"query":"Create a table named 'users' with columns 'id' (INT) and 'name' (TEXT).","code":"cursor = db.cursor()\ncursor.execute(\"CREATE TABLE users (id INT, name TEXT)\")"}
{"query":"Insert a new user with ID 1 and name 'Alice' into the 'users' table.","code":"cursor = db.cursor()\ncursor.execute(\"INSERT INTO users VALUES (1, 'Alice')\")\ndb.commit()"}
{"query":"Fetch all users from the 'users' table.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT * FROM users\")\nusers = cursor.fetchall()"}
{"query":"Retrieve the user with ID 1 from the 'users' table.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT * FROM users WHERE id = 1\")\nuser = cursor.fetchone()"}
{"query":"Update the name of the user with ID 1 to 'Bob' in the 'users' table.","code":"cursor = db.cursor()\ncursor.execute(\"UPDATE users SET name = 'Bob' WHERE id = 1\")\ndb.commit()"}
{"query":"Delete the user with ID 1 from the 'users' table.","code":"cursor = db.cursor()\ncursor.execute(\"DELETE FROM users WHERE id = 1\")\ndb.commit()"}
{"query":"Close the database connection.","code":"db.close()"}
{"query":"Create a table named 'products' with columns 'product_id' (INTEGER), 'product_name' (TEXT), and 'price' (REAL).","code":"cursor = db.cursor()\ncursor.execute(\"CREATE TABLE products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL)\")"}
{"query":"Insert a product named 'Laptop' with price 1200.00 into the 'products' table.","code":"cursor = db.cursor()\ncursor.execute(\"INSERT INTO products (product_name, price) VALUES ('Laptop', 1200.00)\")\ndb.commit()"}
{"query":"Select the product names and prices from the 'products' table, ordered by price in descending order.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT product_name, price FROM products ORDER BY price DESC\")\nproducts = cursor.fetchall()"}
{"query":"Filter products with a price greater than 1000 from the 'products' table.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT * FROM products WHERE price > 1000\")\nexpensive_products = cursor.fetchall()"}
{"query":"Count the number of products in the 'products' table.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT COUNT(*) FROM products\")\nproduct_count = cursor.fetchone()[0]"}
{"query":"Calculate the average price of all products.","code":"cursor = db.cursor()\ncursor.execute(\"SELECT AVG(price) FROM products\")\naverage_price = cursor.fetchone()[0]"}
{"query":"Begin a transaction in the database.","code":"cursor = db.cursor()\ncursor.execute(\"BEGIN TRANSACTION\")"}
{"query":"Rollback the current transaction in the database.","code":"cursor = db.cursor()\ncursor.execute(\"ROLLBACK\")"}
{"query":"Create a new database named 'mydatabase'.","code":"database.create('mydatabase')"}
{"query":"Connect to the 'mydatabase' database.","code":"connection = database.connect('mydatabase')"}
{"query":"Create a table named 'users' with columns for id, name, and email.","code":"cursor = connection.cursor()\ncursor.execute('CREATE TABLE users (id INTEGER, name TEXT, email TEXT)')\nconnection.commit()"}
{"query":"Insert a new user into the 'users' table.","code":"cursor = connection.cursor()\ncursor.execute(\"INSERT INTO users (id, name, email) VALUES (1, 'Alice', 'alice@example.com')\")\nconnection.commit()"}
{"query":"Select all users from the 'users' table.","code":"cursor = connection.cursor()\ncursor.execute('SELECT * FROM users')\nresults = cursor.fetchall()"}
{"query":"Update the email address of a user with id 1 in the 'users' table.","code":"cursor = connection.cursor()\ncursor.execute(\"UPDATE users SET email = 'new_email@example.com' WHERE id = 1\")\nconnection.commit()"}
{"query":"Delete a user with id 1 from the 'users' table.","code":"cursor = connection.cursor()\ncursor.execute('DELETE FROM users WHERE id = 1')\nconnection.commit()"}
{"query":"Drop the 'users' table from the database.","code":"cursor = connection.cursor()\ncursor.execute('DROP TABLE users')\nconnection.commit()"}
{"query":"Close the database connection.","code":"connection.close()"}
{"query":"Execute a SELECT query to find users whose name contains 'a'.","code":"cursor = connection.cursor()\ncursor.execute(\"SELECT * FROM users WHERE name LIKE '%a%'\")\nresults = cursor.fetchall()"}
{"query":"Count the number of users in the 'users' table.","code":"cursor = connection.cursor()\ncursor.execute('SELECT COUNT(*) FROM users')\ncount = cursor.fetchone()[0]"}
{"query":"Retrieve the first 3 users from the 'users' table, ordered by name.","code":"cursor = connection.cursor()\ncursor.execute('SELECT * FROM users ORDER BY name LIMIT 3')\nresults = cursor.fetchall()"}
{"query":"Create an index on the 'name' column of the 'users' table to speed up search.","code":"cursor = connection.cursor()\ncursor.execute('CREATE INDEX name_index ON users (name)')\nconnection.commit()"}
{"query":"Rollback any uncommitted changes in the current transaction.","code":"connection.rollback()"}
{"query":"Begin a new transaction.","code":"connection.begin()"}
{"query":"Commit the current transaction, saving all changes to the database.","code":"connection.commit()"}
{"query":"This code creates a simple TCP server that listens for incoming connections.","code":"import socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 12345))\nserver_socket.listen(1)\nconn, addr = server_socket.accept()\nconn.sendall(b'Hello from server')\nconn.close()\nserver_socket.close()"}
{"query":"This code establishes a TCP client connection to a specified server.","code":"import socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 12345))\ndata = client_socket.recv(1024)\nprint(data.decode())\nclient_socket.close()"}
{"query":"This code sends a UDP datagram to a specified address and port.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsocket.sendto(b'Hello UDP', ('localhost', 54321))\nsocket.close()"}
{"query":"This code receives a UDP datagram from a specific port.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsocket.bind(('localhost', 54321))\ndata, addr = socket.recvfrom(1024)\nprint(data.decode())\nsocket.close()"}
{"query":"This code demonstrates how to get the local hostname.","code":"import socket\nprint(socket.gethostname())"}
{"query":"This code resolves a hostname to its IP address.","code":"import socket\nprint(socket.gethostbyname('localhost'))"}
{"query":"This code performs a DNS lookup for a given hostname.","code":"import socket\nprint(socket.getaddrinfo('www.example.com', 80))"}
{"query":"This code implements a basic HTTP request using sockets.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect(('www.example.com', 80))\nsock.sendall(b'GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n')\nresponse = sock.recv(4096)\nprint(response.decode())\nsock.close()"}
{"query":"This code sets a socket timeout.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.settimeout(5)\n"}
{"query":"This code gets the socket's send buffer size.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint(sock.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF))"}
{"query":"This code gets the socket's receive buffer size.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint(sock.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF))"}
{"query":"This code enables socket reuse.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)"}
{"query":"This code disables the Nagle algorithm.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)"}
{"query":"This code binds a socket to a specific IP address and port.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind(('127.0.0.1', 8080))"}
{"query":"This code closes a socket.","code":"import socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.close()"}
{"query":"This code uses select to check for socket readiness.","code":"import socket, select\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.setblocking(0)\nreadable, writable, exceptional = select.select([sock], [sock], [sock], 1)\n"}
{"query":"This code establishes a TCP client connection to a specified server and port.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.1', 12345))\ns.close()"}
{"query":"The following snippet creates a simple TCP server that listens for incoming connections.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('127.0.0.1', 12345))\ns.listen(1)\nconn, addr = s.accept()\nconn.close()\ns.close()"}
{"query":"This code sends data to a server using a TCP connection.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.1', 12345))\ns.sendall(b'Hello, server!')\ns.close()"}
{"query":"The provided code receives data from a server via a TCP connection.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.1', 12345))\ndata = s.recv(1024)\ns.close()"}
{"query":"The code implements a basic UDP client that sends a message to a specified address.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.sendto(b'Hello, server!', ('127.0.0.1', 5000))\ns.close()"}
{"query":"This snippet creates a UDP server that listens for incoming datagrams.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.bind(('127.0.0.1', 5000))\ndata, addr = s.recvfrom(1024)\ns.close()"}
{"query":"The code demonstrates how to get the local hostname.","code":"import socket\nhostname = socket.gethostname()"}
{"query":"This code resolves a hostname to an IP address.","code":"import socket\nip_address = socket.gethostbyname('www.example.com')"}
{"query":"This code snippet sets a socket timeout.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.settimeout(10)\ns.connect(('127.0.0.1', 12345))"}
{"query":"The provided code gets the current time using the time module.","code":"import time\ncurrent_time = time.time()"}
{"query":"This code example uses select to monitor multiple sockets for readability.","code":"import select\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setblocking(0)\nready = select.select([s], [], [], 1)\nif ready[0]:\n    pass"}
{"query":"The provided code uses the struct module to pack integers into a byte string.","code":"import struct\npacked_data = struct.pack('!i', 12345)"}
{"query":"This snippet unpacks data from a byte string using the struct module.","code":"import struct\nunpacked_data = struct.unpack('!i', b'\\x00\\x0009')\n"}
{"query":"The following code demonstrates sending HTTP GET requests using the http.client module.","code":"import http.client\nconn = http.client.HTTPConnection('www.example.com')\nconn.request('GET', '/')\nresponse = conn.getresponse()\nconn.close()"}
{"query":"This code illustrates how to create a simple echo server using TCP.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('127.0.0.1', 8888))\ns.listen(1)\nconn, addr = s.accept()\ndata = conn.recv(1024)\nconn.sendall(data)\nconn.close()\ns.close()"}
{"query":"The following code creates a simple client to connect with an echo server.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.1', 8888))\ns.sendall(b'hello')\ndata = s.recv(1024)\ns.close()"}
{"query":"Write a simple client that connects to a server and sends a message.","code":"socket.socket().connect(('localhost', 12345))\nsocket.socket().sendall(b'Hello, server!')\nsocket.socket().close()"}
{"query":"Create a basic server that listens for incoming connections and echoes back received data.","code":"socket.socket().bind(('localhost', 12345))\nsocket.socket().listen()\nconn, addr = socket.socket().accept()\ndata = conn.recv(1024)\nconn.sendall(data)\nconn.close()"}
{"query":"Implement a UDP client that sends a datagram to a specified address and port.","code":"socket.socket(socket.AF_INET, socket.SOCK_DGRAM).sendto(b'UDP message', ('localhost', 5000))"}
{"query":"Develop a UDP server that receives datagrams and prints the sender's address and the received data.","code":"socket.socket(socket.AF_INET, socket.SOCK_DGRAM).bind(('localhost', 5000))\ndata, addr = socket.socket().recvfrom(1024)\nprint(f'Received from {addr}: {data.decode()}')"}
{"query":"Write a program that retrieves the IP address of a given hostname.","code":"socket.gethostbyname('www.example.com')"}
{"query":"Create a program that gets the hostname associated with a given IP address.","code":"socket.gethostbyaddr('8.8.8.8')"}
{"query":"Implement a simple HTTP client that retrieves the content of a webpage.","code":"socket.socket().connect(('www.example.com', 80))\nsocket.socket().sendall(b'GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n')\nresponse = socket.socket().recv(4096)\nprint(response.decode())"}
{"query":"Develop a multithreaded server that handles multiple client connections concurrently.","code":"import threading\ndef handle_client(conn, addr):\n    data = conn.recv(1024)\n    conn.sendall(data)\n    conn.close()\nsocket.socket().bind(('localhost', 12345))\nsocket.socket().listen()\nwhile True:\n    conn, addr = socket.socket().accept()\n    threading.Thread(target=handle_client, args=(conn, addr)).start()"}
{"query":"Create a program that checks if a specific port on a remote host is open.","code":"socket.socket().connect_ex(('localhost', 80)) == 0"}
{"query":"Implement a program that sends an email using the SMTP protocol.","code":"import smtplib\nfrom email.mime.text import MIMEText\nmsg = MIMEText('This is the email body')\nmsg['Subject'] = 'Email Subject'\nmsg['From'] = 'your_email@example.com'\nmsg['To'] = 'recipient@example.com'\nwith smtplib.SMTP('smtp.example.com', 587) as server:\n    server.starttls()\n    server.login('your_email@example.com', 'your_password')\n    server.sendmail('your_email@example.com', 'recipient@example.com', msg.as_string())"}
{"query":"Write a basic proxy server that forwards client requests to another server.","code":"socket.socket().bind(('localhost', 8080))\nsocket.socket().listen()\nconn, addr = socket.socket().accept()\ndata = conn.recv(1024)\nproxy_socket = socket.socket()\nproxy_socket.connect(('target_server', 80))\nproxy_socket.sendall(data)\nresponse = proxy_socket.recv(1024)\nconn.sendall(response)\nconn.close()\nproxy_socket.close()"}
{"query":"Implement a simple echo server that uses non-blocking sockets.","code":"import selectors\nsel = selectors.DefaultSelector()\ndef accept(sock, mask):\n    conn, addr = sock.accept()\n    conn.setblocking(False)\n    sel.register(conn, selectors.EVENT_READ, read)\ndef read(conn, mask):\n    data = conn.recv(1024)\n    if data:\n        conn.send(data)\n    else:\n        sel.unregister(conn)\nsock = socket.socket()\nsock.bind(('localhost', 12345))\nsock.listen()\nsock.setblocking(False)\nsel.register(sock, selectors.EVENT_READ, accept)\nwhile True:\n    for key, mask in sel.select():\n        callback = key.data\n        callback(key.fileobj, mask)"}
{"query":"Create a program that uses the `select` module to monitor multiple sockets for activity.","code":"import select\nsockets = [socket.socket(), socket.socket()]\nsockets[0].bind(('localhost', 12345))\nsockets[0].listen()\nreadable, writable, exceptional = select.select(sockets, [], [], 1)\nfor s in readable:\n    conn, addr = s.accept()\n    data = conn.recv(1024)\n    conn.sendall(data)\n    conn.close()"}
{"query":"Implement a basic chat client that allows users to send and receive messages.","code":"socket.socket().connect(('localhost', 5001))\nwhile True:\n    message = input('Enter message: ')\n    socket.socket().sendall(message.encode())\n    data = socket.socket().recv(1024)\n    print(f'Received: {data.decode()}')"}
{"query":"Develop a basic chat server that handles multiple clients and broadcasts messages.","code":"import threading\nconnections = []\ndef handle_client(conn, addr):\n    while True:\n        data = conn.recv(1024)\n        if not data:\n            break\n        for c in connections:\n            c.sendall(data)\n    conn.close()\n    connections.remove(conn)\nsocket.socket().bind(('localhost', 5001))\nsocket.socket().listen()\nwhile True:\n    conn, addr = socket.socket().accept()\n    connections.append(conn)\n    threading.Thread(target=handle_client, args=(conn, addr)).start()"}
{"query":"Create a program that downloads a file from a server using HTTP.","code":"socket.socket().connect(('www.example.com', 80))\nsocket.socket().sendall(b'GET /index.html HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n')\nresponse = socket.socket().recv(4096)\nwith open('index.html', 'wb') as f:\n    f.write(response)"}
{"query":"Create a simple TCP server that listens for incoming connections.","code":"server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 12345))\nserver.listen(5)\nconn, addr = server.accept()\nconn.sendall(b'Hello from server')\nconn.close()\nserver.close()"}
{"query":"Establish a TCP client connection to a server.","code":"client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 12345))\ndata = client.recv(1024)\nprint(data.decode())\nclient.close()"}
{"query":"Implement a basic UDP server that receives data.","code":"udp_server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_server.bind(('localhost', 12346))\ndata, addr = udp_server.recvfrom(1024)\nprint(data.decode())\nudp_server.close()"}
{"query":"Send data using UDP from a client.","code":"udp_client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_client.sendto(b'Hello UDP', ('localhost', 12346))\nudp_client.close()"}
{"query":"Get the local hostname.","code":"hostname = socket.gethostname()\nprint(hostname)"}
{"query":"Get the IP address of a given hostname.","code":"ip_address = socket.gethostbyname('localhost')\nprint(ip_address)"}
{"query":"Create a simple HTTP request to fetch a webpage.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('www.example.com', 80))\ns.sendall(b'GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\nConnection: close\\r\\n\\r\\n')\nresponse = s.recv(4096)\nprint(response.decode())\ns.close()"}
{"query":"Implement a basic client-server interaction to send and receive files.","code":"server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 12347))\nserver.listen(1)\nconn, addr = server.accept()\nfile = open('received_file.txt', 'wb')\ndata = conn.recv(1024)\nwhile data:\n  file.write(data)\n  data = conn.recv(1024)\nfile.close()\nconn.close()\nserver.close()"}
{"query":"Send a file from a client to a server using TCP.","code":"client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 12347))\nfile = open('my_file.txt', 'rb')\ndata = file.read(1024)\nwhile data:\n  client.sendall(data)\n  data = file.read(1024)\nfile.close()\nclient.close()"}
{"query":"Create a simple echo server that sends back what it receives.","code":"echo_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\necho_server.bind(('localhost', 12348))\necho_server.listen(1)\nconn, addr = echo_server.accept()\ndata = conn.recv(1024)\nconn.sendall(data)\nconn.close()\necho_server.close()"}
{"query":"Implement an echo client that sends and receives data from an echo server.","code":"echo_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\necho_client.connect(('localhost', 12348))\necho_client.sendall(b'Hello Echo')\ndata = echo_client.recv(1024)\nprint(data.decode())\necho_client.close()"}
{"query":"Use `select` to monitor multiple sockets for activity.","code":"inputs = [sys.stdin, sock1, sock2]\nwhile inputs:\n  readable, _, _ = select.select(inputs, [], [], timeout)\n  for s in readable:\n      if s is sys.stdin: data = sys.stdin.readline().strip()\n      else: data = s.recv(1024)"}
{"query":"Use `socketserver` to create a simple TCP server with multiple clients.","code":"class MyTCPHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        self.data = self.request.recv(1024).strip()\n        self.request.sendall(self.data.upper())"}
{"query":"Use `threading` to handle multiple client connections concurrently.","code":"def handle_client(conn, addr):\n    data = conn.recv(1024)\n    conn.sendall(data.upper())\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.bind(('localhost', 12349))\n    s.listen()\n    while True:\n        conn, addr = s.accept()\n        threading.Thread(target=handle_client, args=(conn, addr)).start()"}
{"query":"Implement a simple DNS lookup to resolve a hostname to an IP address.","code":"ip_address = gethostbyname('www.example.com')\nprint(ip_address)"}
{"query":"Set a timeout for a socket connection to prevent indefinite blocking.","code":"sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.settimeout(10) # seconds\ntry:\n    sock.connect(('www.example.com', 80))\n    #...process...\nexcept socket.timeout:\n    print('Connection timed out')"}
{"query":"This code establishes a basic TCP client connection to a specified server and port.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('localhost', 12345))\ns.sendall(b'Hello, server!')\ndata = s.recv(1024)\ns.close()"}
{"query":"This Python script creates a simple TCP server that listens for incoming connections.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 12345))\ns.listen()\nconn, addr = s.accept()\nwith conn:\n    data = conn.recv(1024)\n    conn.sendall(data)\ns.close()"}
{"query":"This example demonstrates how to send UDP datagrams to a specific address and port.","code":"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_address = ('localhost', 10000)\nsock.sendto(b'This is a test message', server_address)"}
{"query":"This code snippet shows how to receive UDP datagrams on a specified port.","code":"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_address = ('localhost', 10000)\nsock.bind(server_address)\ndata, address = sock.recvfrom(4096)"}
{"query":"This code retrieves the hostname of the local machine.","code":"hostname = socket.gethostname()"}
{"query":"This script resolves a hostname to its IP address.","code":"ip_address = socket.gethostbyname('www.example.com')"}
{"query":"This example retrieves the IP address associated with the local machine's hostname.","code":"host_name = socket.gethostname()\nlocal_ip = socket.gethostbyname(host_name)"}
{"query":"This program implements a basic HTTP client that fetches content from a given URL.","code":"sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = 'www.example.com'\nport = 80\nsock.connect((host, port))\nrequest = f'GET / HTTP/1.1\\r\\nHost: {host}\\r\\n\\r\\n'\nsock.sendall(request.encode())\nresponse = sock.recv(4096)\nsock.close()"}
{"query":"This code defines a function to check if a given IP address is valid.","code":"import ipaddress\ndef is_valid_ip(ip):\n    try:\n        ipaddress.ip_address(ip)\n        return True\n    except ValueError:\n        return False"}
{"query":"This code implements a simple echo server using TCP.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 5000))\ns.listen(1)\nconn, addr = s.accept()\nwith conn:\n    while True:\n        data = conn.recv(1024)\n        if not data:\n            break\n        conn.sendall(data)"}
{"query":"This code creates a simple HTTP server that responds with 'Hello, world!'.","code":"from http.server import HTTPServer, BaseHTTPRequestHandler\nclass SimpleHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\nhttpd = HTTPServer(('localhost', 8000), SimpleHandler)\nhttpd.serve_forever()"}
{"query":"This script demonstrates how to use `select` for non-blocking socket operations.","code":"import select\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setblocking(0)\ns.bind(('localhost', 5001))\ns.listen(5)\ninputs = [s]\nwhile inputs:\n    readable, writable, exceptional = select.select(inputs, [], [])\n    for sock in readable:\n        if sock is s:\n            conn, addr = s.accept()\n            conn.setblocking(0)\n            inputs.append(conn)\n        else:\n            data = sock.recv(1024)\n            if data:\n                sock.send(data)\n            else:\n                inputs.remove(sock)\n                sock.close()"}
{"query":"This code snippet shows how to set a socket timeout.","code":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.settimeout(5.0)\n# Attempt to connect, might raise timeout error\n"}
{"query":"This code demonstrates how to get the interface information.","code":"import psutil\nfor interface, addrs in psutil.net_if_addrs().items():\n    for addr in addrs:\n        print(f'{interface}: {addr.address}')"}
{"query":"This program shows how to perform a DNS lookup using `socket.getaddrinfo`.","code":"result = socket.getaddrinfo('www.example.com', 80, socket.AF_INET, socket.SOCK_STREAM)\n"}
{"query":"This code implements a simple chat server that broadcasts messages to connected clients.","code":"import threading\n\ndef handle_client(conn, addr):\n    while True:\n        message = conn.recv(1024)\n        if not message:\n            break\n        print(f'{addr}: {message.decode()}')\n\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 6000))\ns.listen()\nwhile True:\n    conn, addr = s.accept()\n    client_thread = threading.Thread(target=handle_client, args=(conn, addr))\n    client_thread.start()"}
{"query":"Create a simple TCP client that connects to a server and sends a message.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = 'localhost'\nport = 12345\nsocket.connect((host, port))\nsocket.sendall(b'Hello, server!')\nsocket.close()"}
{"query":"Implement a basic TCP server that listens for incoming connections and echoes back received data.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = 'localhost'\nport = 12345\nsocket.bind((host, port))\nsocket.listen(1)\nconn, addr = socket.accept()\nwith conn:\n    while True:\n        data = conn.recv(1024)\n        if not data: break\n        conn.sendall(data)\nsocket.close()"}
{"query":"Write a Python script to resolve a domain name to its IP address.","code":"import socket\nimport sys\nif len(sys.argv) != 2:\n    print(\"Usage: python resolve_dns.py <domain_name>\")\n    sys.exit(1)\ndomain_name = sys.argv[1]\ntry:\n    ip_address = socket.gethostbyname(domain_name)\n    print(ip_address)\nexcept socket.gaierror:\n    print(\"Could not resolve hostname\")"}
{"query":"Create a UDP client that sends a message to a server.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nhost = 'localhost'\nport = 5000\nsocket.sendto(b'UDP message', (host, port))\nsocket.close()"}
{"query":"Build a UDP server that receives messages and prints them.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nhost = 'localhost'\nport = 5000\nsocket.bind((host, port))\nwhile True:\n    data, addr = socket.recvfrom(1024)\n    print(\"received message: %s\" % data.decode())"}
{"query":"Demonstrate how to set a socket timeout.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.settimeout(5.0)\ntry:\n    socket.connect(('localhost', 12345))\nexcept socket.timeout:\n    print(\"Connection timed out\")\nfinally:\n    socket.close()"}
{"query":"Show how to get the local hostname.","code":"import socket\nprint(socket.gethostname())"}
{"query":"Implement a basic HTTP request using the socket library.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = 'www.example.com'\nport = 80\nsocket.connect((host, port))\nrequest = b'GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n'\nsocket.send(request)\nresponse = socket.recv(4096)\nprint(response.decode())"}
{"query":"Show how to create a socket that can reuse address.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsocket.bind(('localhost', 8080))\nsocket.listen(1)"}
{"query":"Create a script to check if a specific port is open on a given host.","code":"import socket\ndef is_port_open(host, port):\n    socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    socket.settimeout(1)\n    try:\n        socket.connect((host, port))\n        socket.close()\n        return True\n    except:\n        return False\nprint(is_port_open('localhost', 80))"}
{"query":"Illustrate how to send and receive data in non-blocking mode.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.setblocking(False)\ntry:\n    socket.connect(('localhost', 12345))\nexcept BlockingIOError:\n    pass\nimport select\nrlist, wlist, xlist = select.select([socket], [socket], [], 1)\nif wlist:\n    socket.send(b'test')\n    rlist, wlist, xlist = select.select([socket], [], [], 1)\n    if rlist:\n        print(socket.recv(1024))\nsocket.close()"}
{"query":"Demonstrate a simple DNS lookup using a library.","code":"import socket\nprint(socket.gethostbyname('www.google.com'))"}
{"query":"Show how to bind a socket to a specific interface.","code":"import socket\nsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.bind(('127.0.0.1', 8080))\nsocket.listen(1)"}
{"query":"Implement a simple port scanner.","code":"import socket\ndef scan_port(host, port):\n    socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    socket.settimeout(0.1)\n    try:\n        socket.connect((host, port))\n        return True\n    except:\n        return False\nfor port in range(80, 85):\n    if scan_port('localhost', port):\n        print(f'Port {port} is open')"}
{"query":"Show how to retrieve the default gateway address.","code":"import socket\nimport os\nimport platform\nif platform.system() == 'Windows':\n    os.system('route print > route.txt')\n    with open('route.txt', 'r') as f:\n        for line in f:\n            if '0.0.0.0' in line and '0.0.0.0' not in line.split()[1] and '0.0.0.0' not in line.split()[0]:\n                print(line.split()[2])\n    os.remove('route.txt')\nelse:\n    os.system('ip route | grep default > route.txt')\n    with open('route.txt', 'r') as f:\n        print(f.read().split()[2])\n    os.remove('route.txt')"}
{"query":"Illustrate how to get a list of network interfaces.","code":"import socket\nimport psutil\nfor interface, addresses in psutil.net_if_addrs().items():\n    print(f'Interface: {interface}')\n    for address in addresses:\n        if address.family == socket.AF_INET:\n            print(f'  IP Address: {address.address}')"}